# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class ConfigSystemKernel(BaseModel):
    """
    Anapaya appliance Linux kernel configuration.  # noqa: E501
    """
    hugepage_size: Optional[StrictStr] = Field('2M', description="Size of hugepages the kernel should allocate at boot time.")
    hugepages: Optional[StrictInt] = Field(None, description="Number of hugepages the kernel should allocate at boot time. If not set, a sensible default is used based on the available memory.")
    iommu_enabled: Optional[StrictBool] = Field(False, description="Whether the IOMMU subsystem in the Linux kernel is enabled. IOMMU should be enabled on systems that support it for better performance. Note: After changing this option the appliance needs to be rebooted.")
    __properties = ["hugepage_size", "hugepages", "iommu_enabled"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigSystemKernel:
        """Create an instance of ConfigSystemKernel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigSystemKernel:
        """Create an instance of ConfigSystemKernel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigSystemKernel.parse_obj(obj)

        _obj = ConfigSystemKernel.parse_obj({
            "hugepage_size": obj.get("hugepage_size") if obj.get("hugepage_size") is not None else '2M',
            "hugepages": obj.get("hugepages"),
            "iommu_enabled": obj.get("iommu_enabled") if obj.get("iommu_enabled") is not None else False
        })
        return _obj


