# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ConfigBgpNeighborTransport(BaseModel):
    """
    Transport session parameters for the BGP neighbor  # noqa: E501
    """
    local_address: Optional[StrictStr] = Field(None, description="Set the local IPv4 address to be used for the session when sending BGP update messages. This may be expressed as either an IP address or the name of an interface.")
    __properties = ["local_address"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigBgpNeighborTransport:
        """Create an instance of ConfigBgpNeighborTransport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigBgpNeighborTransport:
        """Create an instance of ConfigBgpNeighborTransport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigBgpNeighborTransport.parse_obj(obj)

        _obj = ConfigBgpNeighborTransport.parse_obj({
            "local_address": obj.get("local_address")
        })
        return _obj


