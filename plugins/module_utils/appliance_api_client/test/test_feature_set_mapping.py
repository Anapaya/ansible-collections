# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from ansible.module_utils.appliance_api_client.models.feature_set_mapping import FeatureSetMapping

class TestFeatureSetMapping(unittest.TestCase):
    """FeatureSetMapping unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FeatureSetMapping:
        """Test FeatureSetMapping
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FeatureSetMapping`
        """
        model = FeatureSetMapping()
        if include_optional:
            return FeatureSetMapping(
                version = '',
                feature_mapping = ansible.module_utils.appliance_api_client.models.feature_mapping.FeatureMapping(
                    edge = ansible.module_utils.appliance_api_client.models.tier_mapping.TierMapping(
                        lite = ansible.module_utils.appliance_api_client.models.product_tier_features.ProductTierFeatures(
                            management = ansible.module_utils.appliance_api_client.models.management_features.ManagementFeatures(
                                api_oauth_disallowed = True, ), 
                            scion_tunneling = ansible.module_utils.appliance_api_client.models.tunneling_features.TunnelingFeatures(
                                config_disallowed = True, 
                                max_remotes = null, 
                                max_path_filters = null, 
                                max_traffic_matchers = null, ), 
                            scion = ansible.module_utils.appliance_api_client.models.scion_features.SCIONFeatures(
                                max_ases = null, 
                                max_parent_links = null, ), 
                            lan = ansible.module_utils.appliance_api_client.models.lan_features.LANFeatures(
                                redundancy_disallowed = True, ), ), 
                        standard = ansible.module_utils.appliance_api_client.models.product_tier_features.ProductTierFeatures(), 
                        pro = , 
                        legacy = , ), 
                    core = ansible.module_utils.appliance_api_client.models.tier_mapping.TierMapping(), 
                    gate = , 
                    other = , )
            )
        else:
            return FeatureSetMapping(
                version = '',
                feature_mapping = ansible.module_utils.appliance_api_client.models.feature_mapping.FeatureMapping(
                    edge = ansible.module_utils.appliance_api_client.models.tier_mapping.TierMapping(
                        lite = ansible.module_utils.appliance_api_client.models.product_tier_features.ProductTierFeatures(
                            management = ansible.module_utils.appliance_api_client.models.management_features.ManagementFeatures(
                                api_oauth_disallowed = True, ), 
                            scion_tunneling = ansible.module_utils.appliance_api_client.models.tunneling_features.TunnelingFeatures(
                                config_disallowed = True, 
                                max_remotes = null, 
                                max_path_filters = null, 
                                max_traffic_matchers = null, ), 
                            scion = ansible.module_utils.appliance_api_client.models.scion_features.SCIONFeatures(
                                max_ases = null, 
                                max_parent_links = null, ), 
                            lan = ansible.module_utils.appliance_api_client.models.lan_features.LANFeatures(
                                redundancy_disallowed = True, ), ), 
                        standard = ansible.module_utils.appliance_api_client.models.product_tier_features.ProductTierFeatures(), 
                        pro = , 
                        legacy = , ), 
                    core = ansible.module_utils.appliance_api_client.models.tier_mapping.TierMapping(), 
                    gate = , 
                    other = , ),
        )
        """

    def testFeatureSetMapping(self):
        """Test FeatureSetMapping"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
