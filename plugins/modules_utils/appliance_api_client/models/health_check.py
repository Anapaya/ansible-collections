# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: 0.1.0
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, field_validator
from openapi_client.models.accept_filter_matches_prefix_wrapped import AcceptFilterMatchesPrefixWrapped
from openapi_client.models.announce_filter_matches_prefix_wrapped import AnnounceFilterMatchesPrefixWrapped
from openapi_client.models.any_domain_has_healthy_remote_gateways_wrapped import AnyDomainHasHealthyRemoteGatewaysWrapped
from openapi_client.models.certificate_chain_for_as_available_wrapped import CertificateChainForASAvailableWrapped
from openapi_client.models.domain_exchanges_ip_prefixes_wrapped import DomainExchangesIPPrefixesWrapped
from openapi_client.models.domain_has_paths_to_remote_wrapped import DomainHasPathsToRemoteWrapped
from openapi_client.models.domain_has_reachable_remote_gateways_wrapped import DomainHasReachableRemoteGatewaysWrapped
from openapi_client.models.domain_traffic_policy_has_paths_wrapped import DomainTrafficPolicyHasPathsWrapped
from openapi_client.models.external_ca_available_wrapped import ExternalCAAvailableWrapped
from openapi_client.models.external_interface_up_wrapped import ExternalInterfaceUpWrapped
from openapi_client.models.meta_health_check import MetaHealthCheck
from openapi_client.models.sibling_interface_up_wrapped import SiblingInterfaceUpWrapped
from openapi_client.models.trc_for_local_isd_available_in_daemon_wrapped import TRCForLocalISDAvailableInDaemonWrapped
from openapi_client.models.trc_for_local_isd_available_wrapped import TRCForLocalISDAvailableWrapped
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

HEALTHCHECK_ONE_OF_SCHEMAS = ["AcceptFilterMatchesPrefixWrapped", "AnnounceFilterMatchesPrefixWrapped", "AnyDomainHasHealthyRemoteGatewaysWrapped", "CertificateChainForASAvailableWrapped", "DomainExchangesIPPrefixesWrapped", "DomainHasPathsToRemoteWrapped", "DomainHasReachableRemoteGatewaysWrapped", "DomainTrafficPolicyHasPathsWrapped", "ExternalCAAvailableWrapped", "ExternalInterfaceUpWrapped", "MetaHealthCheck", "SiblingInterfaceUpWrapped", "TRCForLocalISDAvailableInDaemonWrapped", "TRCForLocalISDAvailableWrapped"]

class HealthCheck(BaseModel):
    """
    HealthCheck
    """
    # data type: MetaHealthCheck
    oneof_schema_1_validator: Optional[MetaHealthCheck] = None
    # data type: ExternalInterfaceUpWrapped
    oneof_schema_2_validator: Optional[ExternalInterfaceUpWrapped] = None
    # data type: SiblingInterfaceUpWrapped
    oneof_schema_3_validator: Optional[SiblingInterfaceUpWrapped] = None
    # data type: TRCForLocalISDAvailableWrapped
    oneof_schema_4_validator: Optional[TRCForLocalISDAvailableWrapped] = None
    # data type: CertificateChainForASAvailableWrapped
    oneof_schema_5_validator: Optional[CertificateChainForASAvailableWrapped] = None
    # data type: ExternalCAAvailableWrapped
    oneof_schema_6_validator: Optional[ExternalCAAvailableWrapped] = None
    # data type: TRCForLocalISDAvailableInDaemonWrapped
    oneof_schema_7_validator: Optional[TRCForLocalISDAvailableInDaemonWrapped] = None
    # data type: AcceptFilterMatchesPrefixWrapped
    oneof_schema_8_validator: Optional[AcceptFilterMatchesPrefixWrapped] = None
    # data type: AnnounceFilterMatchesPrefixWrapped
    oneof_schema_9_validator: Optional[AnnounceFilterMatchesPrefixWrapped] = None
    # data type: DomainHasPathsToRemoteWrapped
    oneof_schema_10_validator: Optional[DomainHasPathsToRemoteWrapped] = None
    # data type: DomainHasReachableRemoteGatewaysWrapped
    oneof_schema_11_validator: Optional[DomainHasReachableRemoteGatewaysWrapped] = None
    # data type: DomainTrafficPolicyHasPathsWrapped
    oneof_schema_12_validator: Optional[DomainTrafficPolicyHasPathsWrapped] = None
    # data type: AnyDomainHasHealthyRemoteGatewaysWrapped
    oneof_schema_13_validator: Optional[AnyDomainHasHealthyRemoteGatewaysWrapped] = None
    # data type: DomainExchangesIPPrefixesWrapped
    oneof_schema_14_validator: Optional[DomainExchangesIPPrefixesWrapped] = None
    actual_instance: Optional[Union[AcceptFilterMatchesPrefixWrapped, AnnounceFilterMatchesPrefixWrapped, AnyDomainHasHealthyRemoteGatewaysWrapped, CertificateChainForASAvailableWrapped, DomainExchangesIPPrefixesWrapped, DomainHasPathsToRemoteWrapped, DomainHasReachableRemoteGatewaysWrapped, DomainTrafficPolicyHasPathsWrapped, ExternalCAAvailableWrapped, ExternalInterfaceUpWrapped, MetaHealthCheck, SiblingInterfaceUpWrapped, TRCForLocalISDAvailableInDaemonWrapped, TRCForLocalISDAvailableWrapped]] = None
    one_of_schemas: List[str] = Literal["AcceptFilterMatchesPrefixWrapped", "AnnounceFilterMatchesPrefixWrapped", "AnyDomainHasHealthyRemoteGatewaysWrapped", "CertificateChainForASAvailableWrapped", "DomainExchangesIPPrefixesWrapped", "DomainHasPathsToRemoteWrapped", "DomainHasReachableRemoteGatewaysWrapped", "DomainTrafficPolicyHasPathsWrapped", "ExternalCAAvailableWrapped", "ExternalInterfaceUpWrapped", "MetaHealthCheck", "SiblingInterfaceUpWrapped", "TRCForLocalISDAvailableInDaemonWrapped", "TRCForLocalISDAvailableWrapped"]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = HealthCheck.model_construct()
        error_messages = []
        match = 0
        # validate data type: MetaHealthCheck
        if not isinstance(v, MetaHealthCheck):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MetaHealthCheck`")
        else:
            match += 1
        # validate data type: ExternalInterfaceUpWrapped
        if not isinstance(v, ExternalInterfaceUpWrapped):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ExternalInterfaceUpWrapped`")
        else:
            match += 1
        # validate data type: SiblingInterfaceUpWrapped
        if not isinstance(v, SiblingInterfaceUpWrapped):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SiblingInterfaceUpWrapped`")
        else:
            match += 1
        # validate data type: TRCForLocalISDAvailableWrapped
        if not isinstance(v, TRCForLocalISDAvailableWrapped):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TRCForLocalISDAvailableWrapped`")
        else:
            match += 1
        # validate data type: CertificateChainForASAvailableWrapped
        if not isinstance(v, CertificateChainForASAvailableWrapped):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CertificateChainForASAvailableWrapped`")
        else:
            match += 1
        # validate data type: ExternalCAAvailableWrapped
        if not isinstance(v, ExternalCAAvailableWrapped):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ExternalCAAvailableWrapped`")
        else:
            match += 1
        # validate data type: TRCForLocalISDAvailableInDaemonWrapped
        if not isinstance(v, TRCForLocalISDAvailableInDaemonWrapped):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TRCForLocalISDAvailableInDaemonWrapped`")
        else:
            match += 1
        # validate data type: AcceptFilterMatchesPrefixWrapped
        if not isinstance(v, AcceptFilterMatchesPrefixWrapped):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AcceptFilterMatchesPrefixWrapped`")
        else:
            match += 1
        # validate data type: AnnounceFilterMatchesPrefixWrapped
        if not isinstance(v, AnnounceFilterMatchesPrefixWrapped):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AnnounceFilterMatchesPrefixWrapped`")
        else:
            match += 1
        # validate data type: DomainHasPathsToRemoteWrapped
        if not isinstance(v, DomainHasPathsToRemoteWrapped):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DomainHasPathsToRemoteWrapped`")
        else:
            match += 1
        # validate data type: DomainHasReachableRemoteGatewaysWrapped
        if not isinstance(v, DomainHasReachableRemoteGatewaysWrapped):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DomainHasReachableRemoteGatewaysWrapped`")
        else:
            match += 1
        # validate data type: DomainTrafficPolicyHasPathsWrapped
        if not isinstance(v, DomainTrafficPolicyHasPathsWrapped):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DomainTrafficPolicyHasPathsWrapped`")
        else:
            match += 1
        # validate data type: AnyDomainHasHealthyRemoteGatewaysWrapped
        if not isinstance(v, AnyDomainHasHealthyRemoteGatewaysWrapped):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AnyDomainHasHealthyRemoteGatewaysWrapped`")
        else:
            match += 1
        # validate data type: DomainExchangesIPPrefixesWrapped
        if not isinstance(v, DomainExchangesIPPrefixesWrapped):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DomainExchangesIPPrefixesWrapped`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in HealthCheck with oneOf schemas: AcceptFilterMatchesPrefixWrapped, AnnounceFilterMatchesPrefixWrapped, AnyDomainHasHealthyRemoteGatewaysWrapped, CertificateChainForASAvailableWrapped, DomainExchangesIPPrefixesWrapped, DomainHasPathsToRemoteWrapped, DomainHasReachableRemoteGatewaysWrapped, DomainTrafficPolicyHasPathsWrapped, ExternalCAAvailableWrapped, ExternalInterfaceUpWrapped, MetaHealthCheck, SiblingInterfaceUpWrapped, TRCForLocalISDAvailableInDaemonWrapped, TRCForLocalISDAvailableWrapped. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in HealthCheck with oneOf schemas: AcceptFilterMatchesPrefixWrapped, AnnounceFilterMatchesPrefixWrapped, AnyDomainHasHealthyRemoteGatewaysWrapped, CertificateChainForASAvailableWrapped, DomainExchangesIPPrefixesWrapped, DomainHasPathsToRemoteWrapped, DomainHasReachableRemoteGatewaysWrapped, DomainTrafficPolicyHasPathsWrapped, ExternalCAAvailableWrapped, ExternalInterfaceUpWrapped, MetaHealthCheck, SiblingInterfaceUpWrapped, TRCForLocalISDAvailableInDaemonWrapped, TRCForLocalISDAvailableWrapped. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into MetaHealthCheck
        try:
            instance.actual_instance = MetaHealthCheck.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ExternalInterfaceUpWrapped
        try:
            instance.actual_instance = ExternalInterfaceUpWrapped.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SiblingInterfaceUpWrapped
        try:
            instance.actual_instance = SiblingInterfaceUpWrapped.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TRCForLocalISDAvailableWrapped
        try:
            instance.actual_instance = TRCForLocalISDAvailableWrapped.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CertificateChainForASAvailableWrapped
        try:
            instance.actual_instance = CertificateChainForASAvailableWrapped.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ExternalCAAvailableWrapped
        try:
            instance.actual_instance = ExternalCAAvailableWrapped.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TRCForLocalISDAvailableInDaemonWrapped
        try:
            instance.actual_instance = TRCForLocalISDAvailableInDaemonWrapped.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AcceptFilterMatchesPrefixWrapped
        try:
            instance.actual_instance = AcceptFilterMatchesPrefixWrapped.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AnnounceFilterMatchesPrefixWrapped
        try:
            instance.actual_instance = AnnounceFilterMatchesPrefixWrapped.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DomainHasPathsToRemoteWrapped
        try:
            instance.actual_instance = DomainHasPathsToRemoteWrapped.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DomainHasReachableRemoteGatewaysWrapped
        try:
            instance.actual_instance = DomainHasReachableRemoteGatewaysWrapped.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DomainTrafficPolicyHasPathsWrapped
        try:
            instance.actual_instance = DomainTrafficPolicyHasPathsWrapped.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AnyDomainHasHealthyRemoteGatewaysWrapped
        try:
            instance.actual_instance = AnyDomainHasHealthyRemoteGatewaysWrapped.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DomainExchangesIPPrefixesWrapped
        try:
            instance.actual_instance = DomainExchangesIPPrefixesWrapped.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into HealthCheck with oneOf schemas: AcceptFilterMatchesPrefixWrapped, AnnounceFilterMatchesPrefixWrapped, AnyDomainHasHealthyRemoteGatewaysWrapped, CertificateChainForASAvailableWrapped, DomainExchangesIPPrefixesWrapped, DomainHasPathsToRemoteWrapped, DomainHasReachableRemoteGatewaysWrapped, DomainTrafficPolicyHasPathsWrapped, ExternalCAAvailableWrapped, ExternalInterfaceUpWrapped, MetaHealthCheck, SiblingInterfaceUpWrapped, TRCForLocalISDAvailableInDaemonWrapped, TRCForLocalISDAvailableWrapped. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into HealthCheck with oneOf schemas: AcceptFilterMatchesPrefixWrapped, AnnounceFilterMatchesPrefixWrapped, AnyDomainHasHealthyRemoteGatewaysWrapped, CertificateChainForASAvailableWrapped, DomainExchangesIPPrefixesWrapped, DomainHasPathsToRemoteWrapped, DomainHasReachableRemoteGatewaysWrapped, DomainTrafficPolicyHasPathsWrapped, ExternalCAAvailableWrapped, ExternalInterfaceUpWrapped, MetaHealthCheck, SiblingInterfaceUpWrapped, TRCForLocalISDAvailableInDaemonWrapped, TRCForLocalISDAvailableWrapped. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


