# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from ansible.module_utils.appliance_api_client.models.config_management_telemetry import ConfigManagementTelemetry  # noqa: E501

class TestConfigManagementTelemetry(unittest.TestCase):
    """ConfigManagementTelemetry unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConfigManagementTelemetry:
        """Test ConfigManagementTelemetry
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConfigManagementTelemetry`
        """
        model = ConfigManagementTelemetry()  # noqa: E501
        if include_optional:
            return ConfigManagementTelemetry(
                address = ':42001',
                flow_metrics = ansible.module_utils.appliance_api_client.models.config_management_telemetry_flow_metrics.Config_Management_Telemetry_FlowMetrics(
                    cleanup_task_interval = '60s', 
                    collector_url = '', 
                    enabled = True, 
                    export_task_interval = '60s', 
                    flow_expiration_interval = '180s', 
                    proxy_url = '', ),
                labels = [
                    ansible.module_utils.appliance_api_client.models.config_management_telemetry_labels.Config_Management_Telemetry_Labels(
                        label = '', 
                        value = '', )
                    ],
                logging = ansible.module_utils.appliance_api_client.models.config_management_telemetry_logging.Config_Management_Telemetry_Logging(
                    logging_type = 'LOKI', 
                    loki = ansible.module_utils.appliance_api_client.models.config_management_telemetry_logging_loki.Config_Management_Telemetry_Logging_Loki(
                        basic_auth = ansible.module_utils.appliance_api_client.models.config_management_telemetry_logging_loki_basic_auth.Config_Management_Telemetry_Logging_Loki_BasicAuth(
                            password = '', 
                            username = 'promtail', ), 
                        tls_config = ansible.module_utils.appliance_api_client.models.config_management_telemetry_logging_loki_tls_config.Config_Management_Telemetry_Logging_Loki_TlsConfig(
                            insecure_skip_verify = True, ), 
                        url = 'https://loki.anapaya.net/loki/api/v1/push', ), )
            )
        else:
            return ConfigManagementTelemetry(
        )
        """

    def testConfigManagementTelemetry(self):
        """Test ConfigManagementTelemetry"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
