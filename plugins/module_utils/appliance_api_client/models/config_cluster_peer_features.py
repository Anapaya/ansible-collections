# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool

class ConfigClusterPeerFeatures(BaseModel):
    """
    Configures the feature options of the peer. This field can not be set together with the synchronization field.  # noqa: E501
    """
    scion_rss: Optional[StrictBool] = Field(False, description="Option to statically enable the SCION RSS feature. If set to true, the local router enables UDP source port entropy on the underlay for SCION packets forwarded to the peer, such that the peer can leverage RSS for SCION traffic. This can greatly improve throughput performance. This must only be set to true if the peer supports the SCION RSS feature.")
    __properties = ["scion_rss"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigClusterPeerFeatures:
        """Create an instance of ConfigClusterPeerFeatures from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigClusterPeerFeatures:
        """Create an instance of ConfigClusterPeerFeatures from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigClusterPeerFeatures.parse_obj(obj)

        _obj = ConfigClusterPeerFeatures.parse_obj({
            "scion_rss": obj.get("scion_rss") if obj.get("scion_rss") is not None else False
        })
        return _obj


