# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, constr, validator
from ansible.module_utils.appliance_api_client.models.encryption_mode import EncryptionMode
from ansible.module_utils.appliance_api_client.models.scion_tunneling_session_path import ScionTunnelingSessionPath

class ScionTunnelingSession(BaseModel):
    """
    ScionTunnelingSession
    """
    session_id: StrictStr = Field(..., description="Unique ID identifying the session.")
    session_id_legacy: StrictInt = Field(..., description="Unique ID identifying the session.")
    local_isd_as: constr(strict=True) = Field(...)
    remote_isd_as: constr(strict=True) = Field(...)
    data_addr: Optional[StrictStr] = Field(None, description="IP address and port used to send data to the remote end of the tunnel.")
    probe_addr: StrictStr = Field(..., description="IP address and port used to probe the remote end of the tunnel.")
    pinned: conlist(StrictInt) = Field(..., description="A list of remote SCION interfaces that can be used by this session. If empty, any remote SCION interface can be used. ")
    domain: StrictStr = Field(..., description="The domain this session is used to access.")
    traffic_matcher: StrictStr = Field(..., description="The class of IP packets this session is used to handle.")
    path_filter: StrictStr = Field(..., description="The path filter specifies which SCION paths can be used by this session.")
    healthy: StrictBool = Field(..., description="True if heartbeats are being received from the remote end of the tunnel.")
    encryption: EncryptionMode = Field(...)
    paths: conlist(ScionTunnelingSessionPath) = Field(..., description="A list of SCION paths eligible for this session.")
    __properties = ["session_id", "session_id_legacy", "local_isd_as", "remote_isd_as", "data_addr", "probe_addr", "pinned", "domain", "traffic_matcher", "path_filter", "healthy", "encryption", "paths"]

    @validator('local_isd_as')
    def local_isd_as_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$/")
        return value

    @validator('remote_isd_as')
    def remote_isd_as_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ScionTunnelingSession:
        """Create an instance of ScionTunnelingSession from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in paths (list)
        _items = []
        if self.paths:
            for _item in self.paths:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paths'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ScionTunnelingSession:
        """Create an instance of ScionTunnelingSession from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ScionTunnelingSession.parse_obj(obj)

        _obj = ScionTunnelingSession.parse_obj({
            "session_id": obj.get("session_id"),
            "session_id_legacy": obj.get("session_id_legacy"),
            "local_isd_as": obj.get("local_isd_as"),
            "remote_isd_as": obj.get("remote_isd_as"),
            "data_addr": obj.get("data_addr"),
            "probe_addr": obj.get("probe_addr"),
            "pinned": obj.get("pinned"),
            "domain": obj.get("domain"),
            "traffic_matcher": obj.get("traffic_matcher"),
            "path_filter": obj.get("path_filter"),
            "healthy": obj.get("healthy"),
            "encryption": obj.get("encryption"),
            "paths": [ScionTunnelingSessionPath.from_dict(_item) for _item in obj.get("paths")] if obj.get("paths") is not None else None
        })
        return _obj


