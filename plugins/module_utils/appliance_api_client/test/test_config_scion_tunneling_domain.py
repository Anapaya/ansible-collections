# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from ansible.module_utils.appliance_api_client.models.config_scion_tunneling_domain import ConfigScionTunnelingDomain

class TestConfigScionTunnelingDomain(unittest.TestCase):
    """ConfigScionTunnelingDomain unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConfigScionTunnelingDomain:
        """Test ConfigScionTunnelingDomain
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConfigScionTunnelingDomain`
        """
        model = ConfigScionTunnelingDomain()
        if include_optional:
            return ConfigScionTunnelingDomain(
                default = True,
                description = 'The domain. It matches all packets and allows any
path to be used.',
                local_isd_ases = [
                    ''
                    ],
                name = 'Default Domain',
                prefixes = ansible.module_utils.appliance_api_client.models.config_scion_tunneling_domain_prefixes.Config_ScionTunneling_Domain_Prefixes(
                    accept_filter = [
                        ansible.module_utils.appliance_api_client.models.config_scion_tunneling_domain_prefixes_accept_filter_entry.Config_ScionTunneling_Domain_Prefixes_AcceptFilterEntry(
                            action = 'ACCEPT', 
                            description = '', 
                            prefixes = ["192.168.1.0/24"], 
                            sequence_id = 1, )
                        ], 
                    announce_filter = [
                        ansible.module_utils.appliance_api_client.models.config_scion_tunneling_domain_prefixes_announce_filter_entry.Config_ScionTunneling_Domain_Prefixes_AnnounceFilterEntry(
                            action = 'ACCEPT', 
                            description = '', 
                            prefixes = ["192.168.1.0/24"], 
                            sequence_id = 1, )
                        ], ),
                remote_isd_ases = [
                    ansible.module_utils.appliance_api_client.models.config_scion_tunneling_domain_remote_matcher.Config_ScionTunneling_Domain_RemoteMatcher(
                        action = 'ACCEPT', 
                        description = '', 
                        isd_as = '0-ff00:0:310', 
                        sequence_id = 1, )
                    ],
                traffic_policies = [
                    ansible.module_utils.appliance_api_client.models.config_scion_tunneling_domain_traffic_policy.Config_ScionTunneling_Domain_TrafficPolicy(
                        description = 'Default traffic policy', 
                        failover_sequence = [
                            ansible.module_utils.appliance_api_client.models.config_scion_tunneling_domain_traffic_policy_failover_sequence_entry.Config_ScionTunneling_Domain_TrafficPolicy_FailoverSequenceEntry(
                                path_filter = '', 
                                sequence_id = 1, )
                            ], 
                        sequence_id = 1, 
                        traffic_matcher = '', )
                    ]
            )
        else:
            return ConfigScionTunnelingDomain(
                name = 'Default Domain',
        )
        """

    def testConfigScionTunnelingDomain(self):
        """Test ConfigScionTunnelingDomain"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
