# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator
from ansible.module_utils.appliance_api_client.models.firewall_rule import FirewallRule

class FirewallChain(BaseModel):
    """
    Firewall chain.  # noqa: E501
    """
    name: StrictStr = Field(..., description="The name of the chain.")
    hook: Optional[StrictStr] = Field(None, description="The packet processing step during which the chain should be executed. Must be set for base chains.")
    priority: Optional[StrictInt] = Field(None, description="The priority of the chain. Must be set for base chains.")
    policy: Optional[StrictStr] = Field(None, description="The default policy that will be applied to packets that reach the end of the chain. ")
    type: Optional[StrictStr] = Field(None, description="The type and usage of the chain. Must be set for base chains.")
    rules: conlist(FirewallRule) = Field(..., description="List of rules that are part of the chain.")
    __properties = ["name", "hook", "priority", "policy", "type", "rules"]

    @validator('hook')
    def hook_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('prerouting', 'input', 'forward', 'output', 'postrouting'):
            raise ValueError("must be one of enum values ('prerouting', 'input', 'forward', 'output', 'postrouting')")
        return value

    @validator('policy')
    def policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('accept', 'drop'):
            raise ValueError("must be one of enum values ('accept', 'drop')")
        return value

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('filter', 'route', 'nat'):
            raise ValueError("must be one of enum values ('filter', 'route', 'nat')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FirewallChain:
        """Create an instance of FirewallChain from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        _items = []
        if self.rules:
            for _item in self.rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FirewallChain:
        """Create an instance of FirewallChain from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FirewallChain.parse_obj(obj)

        _obj = FirewallChain.parse_obj({
            "name": obj.get("name"),
            "hook": obj.get("hook"),
            "priority": obj.get("priority"),
            "policy": obj.get("policy"),
            "type": obj.get("type"),
            "rules": [FirewallRule.from_dict(_item) for _item in obj.get("rules")] if obj.get("rules") is not None else None
        })
        return _obj


