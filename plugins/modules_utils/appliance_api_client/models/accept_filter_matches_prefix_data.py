# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: 0.1.0
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AcceptFilterMatchesPrefixData(BaseModel):
    """
    The entry in the accept filter matches at least one prefix that is received from remotes in the domain. While it is not invalid to have an accept filter entry that does not match anything, it is certainly curious. This health check is meant to help operators identify such cases. This only applies to the entries with action `accept`.  If `count` is zero, the status is `notice`. Otherwise, the status is `passing`. 
    """ # noqa: E501
    domain: StrictStr = Field(description="The domain the accept filter entry is part of. ")
    prefixes: List[StrictStr] = Field(description="The prefixes that the filter entry is configured with. This is not the set of prefixes that are actually matched by the entry. ")
    count: StrictInt = Field(description="The number of prefixes that are matched by the accept filter entry. We count unique prefixes, so if a prefix is matched multiple times, or is announced by multiple remotes, it only counts once. Two overlapping prefixes are counted individually. ")
    __properties: ClassVar[List[str]] = ["domain", "prefixes", "count"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AcceptFilterMatchesPrefixData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AcceptFilterMatchesPrefixData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domain": obj.get("domain"),
            "prefixes": obj.get("prefixes"),
            "count": obj.get("count")
        })
        return _obj


