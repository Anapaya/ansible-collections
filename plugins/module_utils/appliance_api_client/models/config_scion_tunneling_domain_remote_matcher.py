# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator

class ConfigScionTunnelingDomainRemoteMatcher(BaseModel):
    """
    List of remote matchers.  # noqa: E501
    """
    action: StrictStr = Field(..., description="Specify the matchers action.")
    description: Optional[StrictStr] = Field(None, description="Description for the remote matcher.")
    isd_as: StrictStr = Field(..., description="The ISD-AS identifier. The matcher matches the ISD-AS identifier of a SCION AS. 0 indicates a wildcard (both for ISD and AS).")
    sequence_id: StrictInt = Field(..., description="The sequence ID determines the order in which sequence the remote matchers are applied. The sequence ID must be unique for each entry. Target devices apply the remote matchers in order of ascending sequence ID (low to high).")
    __properties = ["action", "description", "isd_as", "sequence_id"]

    @validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ACCEPT', 'REJECT'):
            raise ValueError("must be one of enum values ('ACCEPT', 'REJECT')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigScionTunnelingDomainRemoteMatcher:
        """Create an instance of ConfigScionTunnelingDomainRemoteMatcher from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigScionTunnelingDomainRemoteMatcher:
        """Create an instance of ConfigScionTunnelingDomainRemoteMatcher from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigScionTunnelingDomainRemoteMatcher.parse_obj(obj)

        _obj = ConfigScionTunnelingDomainRemoteMatcher.parse_obj({
            "action": obj.get("action"),
            "description": obj.get("description"),
            "isd_as": obj.get("isd_as"),
            "sequence_id": obj.get("sequence_id")
        })
        return _obj


