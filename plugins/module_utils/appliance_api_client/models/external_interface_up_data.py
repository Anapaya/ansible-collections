# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, constr, validator
from ansible.module_utils.appliance_api_client.models.link_relationship import LinkRelationship
from ansible.module_utils.appliance_api_client.models.link_state import LinkState

class ExternalInterfaceUpData(BaseModel):
    """
    The external interface to a neighboring SCION AS is up.  If the interface is configured with BFD enabled, the health check reports up if the BFD session is up. If BFD is not enabled, the health check always reports up.   # noqa: E501
    """
    local_isd_as: constr(strict=True) = Field(...)
    local_address: StrictStr = Field(..., description="The local underaly UDP address.")
    local_interface: StrictInt = Field(..., description="The local interface identifier.")
    remote_isd_as: constr(strict=True) = Field(...)
    remote_address: StrictStr = Field(..., description="The remote underaly UDP address.")
    remote_interface: StrictInt = Field(..., description="The remote interface identifier.")
    relationship: LinkRelationship = Field(...)
    state: LinkState = Field(...)
    bfd_enabled: StrictBool = Field(..., description="Whether BFD is enabled on the interface.")
    __properties = ["local_isd_as", "local_address", "local_interface", "remote_isd_as", "remote_address", "remote_interface", "relationship", "state", "bfd_enabled"]

    @validator('local_isd_as')
    def local_isd_as_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$/")
        return value

    @validator('remote_isd_as')
    def remote_isd_as_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExternalInterfaceUpData:
        """Create an instance of ExternalInterfaceUpData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExternalInterfaceUpData:
        """Create an instance of ExternalInterfaceUpData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExternalInterfaceUpData.parse_obj(obj)

        _obj = ExternalInterfaceUpData.parse_obj({
            "local_isd_as": obj.get("local_isd_as"),
            "local_address": obj.get("local_address"),
            "local_interface": obj.get("local_interface"),
            "remote_isd_as": obj.get("remote_isd_as"),
            "remote_address": obj.get("remote_address"),
            "remote_interface": obj.get("remote_interface"),
            "relationship": obj.get("relationship"),
            "state": obj.get("state"),
            "bfd_enabled": obj.get("bfd_enabled")
        })
        return _obj


