# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from ansible.module_utils.appliance_api_client.models.feature_mapping import FeatureMapping  # noqa: E501

class TestFeatureMapping(unittest.TestCase):
    """FeatureMapping unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FeatureMapping:
        """Test FeatureMapping
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FeatureMapping`
        """
        model = FeatureMapping()  # noqa: E501
        if include_optional:
            return FeatureMapping(
                edge = ansible.module_utils.appliance_api_client.models.tier_mapping.TierMapping(
                    lite = ansible.module_utils.appliance_api_client.models.product_tier_features.ProductTierFeatures(
                        management = ansible.module_utils.appliance_api_client.models.management_features.ManagementFeatures(
                            api_oauth_disallowed = True, ), 
                        scion_tunneling = ansible.module_utils.appliance_api_client.models.tunneling_features.TunnelingFeatures(
                            config_disallowed = True, 
                            max_remotes = null, 
                            max_path_filters = null, 
                            max_traffic_matchers = null, ), 
                        scion = ansible.module_utils.appliance_api_client.models.scion_features.SCIONFeatures(
                            max_ases = null, 
                            max_parent_links = null, ), 
                        lan = ansible.module_utils.appliance_api_client.models.lan_features.LANFeatures(
                            redundancy_disallowed = True, ), ), 
                    standard = ansible.module_utils.appliance_api_client.models.product_tier_features.ProductTierFeatures(), 
                    pro = , 
                    legacy = , ),
                core = ansible.module_utils.appliance_api_client.models.tier_mapping.TierMapping(
                    lite = ansible.module_utils.appliance_api_client.models.product_tier_features.ProductTierFeatures(
                        management = ansible.module_utils.appliance_api_client.models.management_features.ManagementFeatures(
                            api_oauth_disallowed = True, ), 
                        scion_tunneling = ansible.module_utils.appliance_api_client.models.tunneling_features.TunnelingFeatures(
                            config_disallowed = True, 
                            max_remotes = null, 
                            max_path_filters = null, 
                            max_traffic_matchers = null, ), 
                        scion = ansible.module_utils.appliance_api_client.models.scion_features.SCIONFeatures(
                            max_ases = null, 
                            max_parent_links = null, ), 
                        lan = ansible.module_utils.appliance_api_client.models.lan_features.LANFeatures(
                            redundancy_disallowed = True, ), ), 
                    standard = ansible.module_utils.appliance_api_client.models.product_tier_features.ProductTierFeatures(), 
                    pro = , 
                    legacy = , ),
                gate = ansible.module_utils.appliance_api_client.models.tier_mapping.TierMapping(
                    lite = ansible.module_utils.appliance_api_client.models.product_tier_features.ProductTierFeatures(
                        management = ansible.module_utils.appliance_api_client.models.management_features.ManagementFeatures(
                            api_oauth_disallowed = True, ), 
                        scion_tunneling = ansible.module_utils.appliance_api_client.models.tunneling_features.TunnelingFeatures(
                            config_disallowed = True, 
                            max_remotes = null, 
                            max_path_filters = null, 
                            max_traffic_matchers = null, ), 
                        scion = ansible.module_utils.appliance_api_client.models.scion_features.SCIONFeatures(
                            max_ases = null, 
                            max_parent_links = null, ), 
                        lan = ansible.module_utils.appliance_api_client.models.lan_features.LANFeatures(
                            redundancy_disallowed = True, ), ), 
                    standard = ansible.module_utils.appliance_api_client.models.product_tier_features.ProductTierFeatures(), 
                    pro = , 
                    legacy = , ),
                other = ansible.module_utils.appliance_api_client.models.tier_mapping.TierMapping(
                    lite = ansible.module_utils.appliance_api_client.models.product_tier_features.ProductTierFeatures(
                        management = ansible.module_utils.appliance_api_client.models.management_features.ManagementFeatures(
                            api_oauth_disallowed = True, ), 
                        scion_tunneling = ansible.module_utils.appliance_api_client.models.tunneling_features.TunnelingFeatures(
                            config_disallowed = True, 
                            max_remotes = null, 
                            max_path_filters = null, 
                            max_traffic_matchers = null, ), 
                        scion = ansible.module_utils.appliance_api_client.models.scion_features.SCIONFeatures(
                            max_ases = null, 
                            max_parent_links = null, ), 
                        lan = ansible.module_utils.appliance_api_client.models.lan_features.LANFeatures(
                            redundancy_disallowed = True, ), ), 
                    standard = ansible.module_utils.appliance_api_client.models.product_tier_features.ProductTierFeatures(), 
                    pro = , 
                    legacy = , )
            )
        else:
            return FeatureMapping(
        )
        """

    def testFeatureMapping(self):
        """Test FeatureMapping"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
