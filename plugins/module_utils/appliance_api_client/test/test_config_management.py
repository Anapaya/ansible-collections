# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: 0.1.0
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from ansible.module_utils.appliance_api_client.models.config_management import ConfigManagement

class TestConfigManagement(unittest.TestCase):
    """ConfigManagement unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConfigManagement:
        """Test ConfigManagement
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConfigManagement`
        """
        model = ConfigManagement()
        if include_optional:
            return ConfigManagement(
                api = ansible.module_utils.appliance_api_client.models.config_management_api.Config_Management_Api(
                    basic_auth = ansible.module_utils.appliance_api_client.models.config_management_api_basic_auth.Config_Management_Api_BasicAuth(
                        enabled = True, 
                        users = [
                            ansible.module_utils.appliance_api_client.models.config_management_api_basic_auth_user.Config_Management_Api_BasicAuth_User(
                                password_hashed = '$2y$10$QNodxwKFABMWu4XlFPmZDOSfqxrsqNvrSn487lCi7tJ/4nTsT/f02', 
                                username = 'admin', )
                            ], ), 
                    listeners = [
                        ansible.module_utils.appliance_api_client.models.config_management_api_listener.Config_Management_Api_Listener(
                            address = '127.0.0.1:443', 
                            description = '', )
                        ], 
                    oauth = ansible.module_utils.appliance_api_client.models.config_management_api_oauth.Config_Management_Api_Oauth(
                        enabled = True, 
                        identity_providers = [
                            ansible.module_utils.appliance_api_client.models.config_management_api_oauth_identity_provider.Config_Management_Api_Oauth_IdentityProvider(
                                base_auth_url = 'https://anapaya.eu.auth0.com/', 
                                client_id = '', 
                                client_secret = '', 
                                id = '', 
                                metadata_url = 'https://anapaya.eu.auth0.com/.well-known/openid-configuration', 
                                tenant_id = '', 
                                type = 'GENERIC', )
                            ], 
                        roles = [
                            ansible.module_utils.appliance_api_client.models.config_management_api_oauth_role.Config_Management_Api_Oauth_Role(
                                aliases = [
                                    ''
                                    ], 
                                role = '', )
                            ], 
                        token_verification_keys = [
                            ansible.module_utils.appliance_api_client.models.config_management_api_oauth_token_verification_key.Config_Management_Api_Oauth_TokenVerificationKey(
                                id = 'anapaya.auth0', 
                                jwks_url = 'https://anapaya.eu.auth0.com/.well-known/jwks.json', )
                            ], ), 
                    unprotected = True, ),
                hostname = 'anapaya-appliance',
                remote_repository = ansible.module_utils.appliance_api_client.models.config_management_remote_repository.Config_Management_RemoteRepository(
                    cloudsmith = ansible.module_utils.appliance_api_client.models.config_management_remote_repository_cloudsmith.Config_Management_RemoteRepository_Cloudsmith(
                        access_token = 'APIKEY#ENTITLEMENTTOKEN', 
                        url = 'https://cloudsmith.io/anapaya/repos/external', ), 
                    repository_type = 'CLOUDSMITH', ),
                ssh = ansible.module_utils.appliance_api_client.models.config_management_ssh.Config_Management_Ssh(
                    enable_password_login = True, 
                    users = [
                        ansible.module_utils.appliance_api_client.models.config_management_ssh_user.Config_Management_Ssh_User(
                            ssh_keys = [
                                ansible.module_utils.appliance_api_client.models.config_management_ssh_user_ssh_key.Config_Management_Ssh_User_SshKey(
                                    description = '', 
                                    key = 'ssh-rsa AAAAB3NzaC1yc2', )
                                ], 
                            username = 'anapaya', )
                        ], ),
                telemetry = ansible.module_utils.appliance_api_client.models.config_management_telemetry.Config_Management_Telemetry(
                    address = ':42001', 
                    flow_metrics = ansible.module_utils.appliance_api_client.models.config_management_telemetry_flow_metrics.Config_Management_Telemetry_FlowMetrics(
                        cleanup_task_interval = '60s', 
                        collector_url = '', 
                        enabled = True, 
                        export_task_interval = '60s', 
                        flow_expiration_interval = '180s', 
                        proxy_url = '', ), 
                    labels = [
                        ansible.module_utils.appliance_api_client.models.config_management_telemetry_labels.Config_Management_Telemetry_Labels(
                            label = '', 
                            value = '', )
                        ], 
                    logging = ansible.module_utils.appliance_api_client.models.config_management_telemetry_logging.Config_Management_Telemetry_Logging(
                        logging_type = 'LOKI', 
                        loki = ansible.module_utils.appliance_api_client.models.config_management_telemetry_logging_loki.Config_Management_Telemetry_Logging_Loki(
                            basic_auth = ansible.module_utils.appliance_api_client.models.config_management_telemetry_logging_loki_basic_auth.Config_Management_Telemetry_Logging_Loki_BasicAuth(
                                password = '', 
                                username = 'promtail', ), 
                            tls_config = ansible.module_utils.appliance_api_client.models.config_management_telemetry_logging_loki_tls_config.Config_Management_Telemetry_Logging_Loki_TlsConfig(
                                insecure_skip_verify = True, ), 
                            url = 'https://loki.anapaya.net/loki/api/v1/push', ), ), )
            )
        else:
            return ConfigManagement(
        )
        """

    def testConfigManagement(self):
        """Test ConfigManagement"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
