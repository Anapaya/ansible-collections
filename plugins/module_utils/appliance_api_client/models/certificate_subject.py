# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: 0.1.0
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CertificateSubject(BaseModel):
    """
    CertificateSubject
    """ # noqa: E501
    isd_as: Annotated[str, Field(strict=True)]
    common_name: Optional[StrictStr] = Field(default=None, description="The common name to use in the CSR, may be empty.")
    country: Optional[StrictStr] = Field(default=None, description="The 2 letter country code to use in the CSR, may be empty.")
    locality: Optional[StrictStr] = Field(default=None, description="The locality to use in the CSR, may be empty.")
    organization: Optional[StrictStr] = Field(default=None, description="The organization to use in the CSR, may be empty.")
    organizational_unit: Optional[StrictStr] = Field(default=None, description="The organizational unit to use in the CSR, may be empty.")
    postal_code: Optional[StrictStr] = Field(default=None, description="The postal code to use in the CSR, may be empty.")
    province: Optional[StrictStr] = Field(default=None, description="The province to use in the CSR, may be empty.")
    serial_number: Optional[StrictStr] = Field(default=None, description="The serial number to use in the CSR, may be empty.")
    street_address: Optional[StrictStr] = Field(default=None, description="The street address to use in the CSR, may be empty.")
    __properties: ClassVar[List[str]] = ["isd_as", "common_name", "country", "locality", "organization", "organizational_unit", "postal_code", "province", "serial_number", "street_address"]

    @field_validator('isd_as')
    def isd_as_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CertificateSubject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CertificateSubject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isd_as": obj.get("isd_as"),
            "common_name": obj.get("common_name"),
            "country": obj.get("country"),
            "locality": obj.get("locality"),
            "organization": obj.get("organization"),
            "organizational_unit": obj.get("organizational_unit"),
            "postal_code": obj.get("postal_code"),
            "province": obj.get("province"),
            "serial_number": obj.get("serial_number"),
            "street_address": obj.get("street_address")
        })
        return _obj


