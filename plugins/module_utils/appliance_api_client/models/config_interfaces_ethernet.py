# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator
from ansible.module_utils.appliance_api_client.models.config_interfaces_ethernet_gateway import ConfigInterfacesEthernetGateway
from ansible.module_utils.appliance_api_client.models.config_interfaces_ethernet_neighbor import ConfigInterfacesEthernetNeighbor
from ansible.module_utils.appliance_api_client.models.config_interfaces_ethernet_route import ConfigInterfacesEthernetRoute
from ansible.module_utils.appliance_api_client.models.config_interfaces_ethernet_vpp import ConfigInterfacesEthernetVpp
from ansible.module_utils.appliance_api_client.models.config_interfaces_ethernet_vrrp import ConfigInterfacesEthernetVrrp

class ConfigInterfacesEthernet(BaseModel):
    """
    List of ethernet interfaces.  # noqa: E501
    """
    accept_ra: Optional[StrictBool] = Field(False, description="Whether to accept the route advertisements for the corresponding interface. (This is currently supported only for the interfaces that are using the Linux driver.)")
    addresses: Optional[conlist(StrictStr)] = Field(None, description="The addresses configured on this interface. Each address must be a valid IP prefix in CIDR notation.")
    driver: Optional[StrictStr] = Field(None, description="The driver which should be used for the interface.")
    gateway: Optional[ConfigInterfacesEthernetGateway] = None
    mac: Optional[StrictStr] = Field(None, description="The MAC address to use on this interface. It is of the form `XX:XX:XX:XX:XX:XX`.")
    mtu: Optional[StrictInt] = Field(1500, description="The MTU (Maximum Transmission Unit) to be used on this interface.")
    name: StrictStr = Field(..., description="The name of the network interface.")
    neighbors: Optional[conlist(ConfigInterfacesEthernetNeighbor)] = Field(None, description="The static neighbors configured on this network interface.")
    routes: Optional[conlist(ConfigInterfacesEthernetRoute)] = Field(None, description="The routes which are configured on this network interface.")
    rx_queue_size: Optional[StrictInt] = Field(1024, description="The number of descriptors in the receive queue. (This option is currently supported only for VPP interfaces.)")
    tx_queue_size: Optional[StrictInt] = Field(1024, description="The number of descriptors in the transmit queue. (This is currently supported only for VPP interfaces.)")
    vpp: Optional[ConfigInterfacesEthernetVpp] = None
    vrrp: Optional[conlist(ConfigInterfacesEthernetVrrp)] = Field(None, description="The VRRP (Virtual Router Redundancy Protocol) configurations for this interface.")
    __properties = ["accept_ra", "addresses", "driver", "gateway", "mac", "mtu", "name", "neighbors", "routes", "rx_queue_size", "tx_queue_size", "vpp", "vrrp"]

    @validator('driver')
    def driver_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('LINUX', 'VPP', 'VPP_DPDK', 'VPP_VMXNET3', 'VPP_MEMIF', 'VPP_RDMA'):
            raise ValueError("must be one of enum values ('LINUX', 'VPP', 'VPP_DPDK', 'VPP_VMXNET3', 'VPP_MEMIF', 'VPP_RDMA')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigInterfacesEthernet:
        """Create an instance of ConfigInterfacesEthernet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of gateway
        if self.gateway:
            _dict['gateway'] = self.gateway.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in neighbors (list)
        _items = []
        if self.neighbors:
            for _item in self.neighbors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['neighbors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in routes (list)
        _items = []
        if self.routes:
            for _item in self.routes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['routes'] = _items
        # override the default output from pydantic by calling `to_dict()` of vpp
        if self.vpp:
            _dict['vpp'] = self.vpp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in vrrp (list)
        _items = []
        if self.vrrp:
            for _item in self.vrrp:
                if _item:
                    _items.append(_item.to_dict())
            _dict['vrrp'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigInterfacesEthernet:
        """Create an instance of ConfigInterfacesEthernet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigInterfacesEthernet.parse_obj(obj)

        _obj = ConfigInterfacesEthernet.parse_obj({
            "accept_ra": obj.get("accept_ra") if obj.get("accept_ra") is not None else False,
            "addresses": obj.get("addresses"),
            "driver": obj.get("driver"),
            "gateway": ConfigInterfacesEthernetGateway.from_dict(obj.get("gateway")) if obj.get("gateway") is not None else None,
            "mac": obj.get("mac"),
            "mtu": obj.get("mtu") if obj.get("mtu") is not None else 1500,
            "name": obj.get("name"),
            "neighbors": [ConfigInterfacesEthernetNeighbor.from_dict(_item) for _item in obj.get("neighbors")] if obj.get("neighbors") is not None else None,
            "routes": [ConfigInterfacesEthernetRoute.from_dict(_item) for _item in obj.get("routes")] if obj.get("routes") is not None else None,
            "rx_queue_size": obj.get("rx_queue_size") if obj.get("rx_queue_size") is not None else 1024,
            "tx_queue_size": obj.get("tx_queue_size") if obj.get("tx_queue_size") is not None else 1024,
            "vpp": ConfigInterfacesEthernetVpp.from_dict(obj.get("vpp")) if obj.get("vpp") is not None else None,
            "vrrp": [ConfigInterfacesEthernetVrrp.from_dict(_item) for _item in obj.get("vrrp")] if obj.get("vrrp") is not None else None
        })
        return _obj


