# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator

class NetworkInterface(BaseModel):
    """
    Network interface summary.  # noqa: E501
    """
    name: StrictStr = Field(..., description="Name of the interface.")
    mtu: StrictInt = Field(..., description="MTU of the interface.")
    state: StrictStr = Field(..., description="State of the interface. Either up or down. Unknown means that the interface is in inconsistent state. ")
    driver: StrictStr = Field(..., description="Which networking stack (linux, vpp) the interface is part of.")
    addresses: conlist(StrictStr) = Field(..., description="IP addresses configured on the interface.")
    __properties = ["name", "mtu", "state", "driver", "addresses"]

    @validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('up', 'down', 'unknown'):
            raise ValueError("must be one of enum values ('up', 'down', 'unknown')")
        return value

    @validator('driver')
    def driver_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('linux', 'vpp'):
            raise ValueError("must be one of enum values ('linux', 'vpp')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NetworkInterface:
        """Create an instance of NetworkInterface from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NetworkInterface:
        """Create an instance of NetworkInterface from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NetworkInterface.parse_obj(obj)

        _obj = NetworkInterface.parse_obj({
            "name": obj.get("name"),
            "mtu": obj.get("mtu"),
            "state": obj.get("state"),
            "driver": obj.get("driver"),
            "addresses": obj.get("addresses")
        })
        return _obj


