# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, StrictStr

class DomainExchangesIPPrefixesData(BaseModel):
    """
    Indicates the number of accepted prefixes from remote gateways and the number of announced prefixes.  If either received or announced or both are zero, the status is `notice`. Otherwise, the status is `passing`.   # noqa: E501
    """
    domain: StrictStr = Field(..., description="The name of the routing domain. ")
    received_prefixes: StrictInt = Field(..., description="The number of received IP prefixes that pass the accept filters. ")
    announced_prefixes: StrictInt = Field(..., description="The number of announced IP prefixes that pass the announce filters. ")
    __properties = ["domain", "received_prefixes", "announced_prefixes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DomainExchangesIPPrefixesData:
        """Create an instance of DomainExchangesIPPrefixesData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DomainExchangesIPPrefixesData:
        """Create an instance of DomainExchangesIPPrefixesData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DomainExchangesIPPrefixesData.parse_obj(obj)

        _obj = DomainExchangesIPPrefixesData.parse_obj({
            "domain": obj.get("domain"),
            "received_prefixes": obj.get("received_prefixes"),
            "announced_prefixes": obj.get("announced_prefixes")
        })
        return _obj


