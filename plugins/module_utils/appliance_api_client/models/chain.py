# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from ansible.module_utils.appliance_api_client.models.certificate import Certificate

class Chain(BaseModel):
    """
    Chain
    """
    as_certificate: Certificate = Field(...)
    ca_certificate: Certificate = Field(...)
    __properties = ["as_certificate", "ca_certificate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Chain:
        """Create an instance of Chain from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of as_certificate
        if self.as_certificate:
            _dict['as_certificate'] = self.as_certificate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ca_certificate
        if self.ca_certificate:
            _dict['ca_certificate'] = self.ca_certificate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Chain:
        """Create an instance of Chain from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Chain.parse_obj(obj)

        _obj = Chain.parse_obj({
            "as_certificate": Certificate.from_dict(obj.get("as_certificate")) if obj.get("as_certificate") is not None else None,
            "ca_certificate": Certificate.from_dict(obj.get("ca_certificate")) if obj.get("ca_certificate") is not None else None
        })
        return _obj


