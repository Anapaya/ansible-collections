# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator
from ansible.module_utils.appliance_api_client.models.scion_path_hop import ScionPathHop

class ScionPath(BaseModel):
    """
    ScionPath
    """
    fingerprint: StrictStr = Field(..., description="The fingerprint of the path.")
    human: StrictStr = Field(..., description="Human readable representation of the SCION path.")
    hops: conlist(ScionPathHop) = Field(..., description="List of individual hops on the SCION path.")
    status: StrictStr = Field(..., description="Human readable description of the state of the path.")
    next_hop: StrictStr = Field(..., description="Next hop is the address of the local SCION router to use.")
    expiration: datetime = Field(..., description="Expiry specifies until when is the path valid.")
    mtu: StrictInt = Field(..., description="MTU of the path.")
    __properties = ["fingerprint", "human", "hops", "status", "next_hop", "expiration", "mtu"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('alive', 'dead', 'revoked', 'expired', 'unknown'):
            raise ValueError("must be one of enum values ('alive', 'dead', 'revoked', 'expired', 'unknown')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ScionPath:
        """Create an instance of ScionPath from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in hops (list)
        _items = []
        if self.hops:
            for _item in self.hops:
                if _item:
                    _items.append(_item.to_dict())
            _dict['hops'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ScionPath:
        """Create an instance of ScionPath from a dict"""


