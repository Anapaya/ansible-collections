# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ScionTunnelingSGRPPeer(BaseModel):
    """
    ScionTunnelingSGRPPeer
    """ # noqa: E501
    local_isd_as: Annotated[str, Field(strict=True)] = Field(alias="local-isd-as")
    remote_isd_as: Annotated[str, Field(strict=True)] = Field(alias="remote-isd-as")
    remote_address: StrictStr = Field(description="IP address and port of the remote peer.", alias="remote-address")
    announced: List[StrictStr] = Field(description="IP prefixes in CIDR format that will be announced to the remote gateway the next time it asks. ")
    received: List[StrictStr] = Field(description="IP prefixes in CIDR format received from the remote gateway during the last discovery attempt. ")
    path: Optional[StrictStr] = Field(default=None, description="SCION path used for the last SGRP request.")
    last_received: StrictStr = Field(description="The last time when the prefixes were received from the peer.", alias="last-received")
    error: Optional[StrictStr] = Field(default=None, description="Error from the last prefix discovery request. If there was no error, the field is not present. ")
    __properties: ClassVar[List[str]] = ["local-isd-as", "remote-isd-as", "remote-address", "announced", "received", "path", "last-received", "error"]

    @field_validator('local_isd_as')
    def local_isd_as_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$/")
        return value

    @field_validator('remote_isd_as')
    def remote_isd_as_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ScionTunnelingSGRPPeer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ScionTunnelingSGRPPeer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "local-isd-as": obj.get("local-isd-as"),
            "remote-isd-as": obj.get("remote-isd-as"),
            "remote-address": obj.get("remote-address"),
            "announced": obj.get("announced"),
            "received": obj.get("received"),
            "path": obj.get("path"),
            "last-received": obj.get("last-received"),
            "error": obj.get("error")
        })
        return _obj


