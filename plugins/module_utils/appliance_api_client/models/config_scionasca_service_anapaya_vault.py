# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from ansible.module_utils.appliance_api_client.models.config_scionasca_service_anapaya_vault_credentials import ConfigSCIONASCAServiceAnapayaVaultCredentials
from ansible.module_utils.appliance_api_client.models.config_scionasca_service_anapaya_vault_validation import ConfigSCIONASCAServiceAnapayaVaultValidation

class ConfigSCIONASCAServiceAnapayaVault(BaseModel):
    """
    The configuration data of the Anapaya SCION CPPKI CA service. This section is provided only when the CA service type is Anapaya Vault, i.e., is operated by Anapaya.  # noqa: E501
    """
    addresses: Optional[conlist(StrictStr)] = Field(None, description="The list of addresses where the Anapaya Vault backend can be reached. This list must be non-empty.")
    credentials: Optional[ConfigSCIONASCAServiceAnapayaVaultCredentials] = None
    validation: Optional[ConfigSCIONASCAServiceAnapayaVaultValidation] = None
    __properties = ["addresses", "credentials", "validation"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigSCIONASCAServiceAnapayaVault:
        """Create an instance of ConfigSCIONASCAServiceAnapayaVault from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of credentials
        if self.credentials:
            _dict['credentials'] = self.credentials.to_dict()
        # override the default output from pydantic by calling `to_dict()` of validation
        if self.validation:
            _dict['validation'] = self.validation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigSCIONASCAServiceAnapayaVault:
        """Create an instance of ConfigSCIONASCAServiceAnapayaVault from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigSCIONASCAServiceAnapayaVault.parse_obj(obj)

        _obj = ConfigSCIONASCAServiceAnapayaVault.parse_obj({
            "addresses": obj.get("addresses"),
            "credentials": ConfigSCIONASCAServiceAnapayaVaultCredentials.from_dict(obj.get("credentials")) if obj.get("credentials") is not None else None,
            "validation": ConfigSCIONASCAServiceAnapayaVaultValidation.from_dict(obj.get("validation")) if obj.get("validation") is not None else None
        })
        return _obj


