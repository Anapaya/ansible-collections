# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: 0.1.0
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.lan_stats import LanStats

class TestLanStats(unittest.TestCase):
    """LanStats unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LanStats:
        """Test LanStats
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LanStats`
        """
        model = LanStats()
        if include_optional:
            return LanStats(
                gateways = {
                    'key' : openapi_client.models.lan_stats_gateway.LanStatsGateway(
                        probe_address = '', 
                        local_isd_as = '1-ff00:0:110', 
                        alive = True, 
                        latency = 1.337, 
                        jitter = 1.337, 
                        last_success_time = '2022-04-22 15:50:13.793654 +0000 UTC', )
                    }
            )
        else:
            return LanStats(
                gateways = {
                    'key' : openapi_client.models.lan_stats_gateway.LanStatsGateway(
                        probe_address = '', 
                        local_isd_as = '1-ff00:0:110', 
                        alive = True, 
                        latency = 1.337, 
                        jitter = 1.337, 
                        last_success_time = '2022-04-22 15:50:13.793654 +0000 UTC', )
                    },
        )
        """

    def testLanStats(self):
        """Test LanStats"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
