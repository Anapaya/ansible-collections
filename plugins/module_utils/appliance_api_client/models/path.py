# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conint, conlist, constr, validator
from ansible.module_utils.appliance_api_client.models.hop import Hop

class Path(BaseModel):
    """
    Path
    """
    fingerprint: constr(strict=True) = Field(..., description="Hex-string representing the paths fingerprint.")
    hops: conlist(Hop) = Field(...)
    next_hop: StrictStr = Field(..., description="The internal UDP/IP underlay address of the SCION router that forwards traffic for this path. ")
    expiry: datetime = Field(..., description="Expiration time of the path.")
    mtu: conint(strict=True, ge=0) = Field(..., description="The maximum transmission unit in bytes for SCION packets. This represents the protocol data unit (PDU) of the SCION layer on this path.")
    latency: Optional[conlist(StrictStr)] = Field(None, description="Optional array of latency measurements between any two consecutive interfaces. Entry i describes the latency between interface i and i+1. ")
    status: Optional[StrictStr] = None
    local_ip: Optional[StrictStr] = None
    __properties = ["fingerprint", "hops", "next_hop", "expiry", "mtu", "latency", "status", "local_ip"]

    @validator('fingerprint')
    def fingerprint_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"[a-f0-9]+", value):
            raise ValueError(r"must validate the regular expression /[a-f0-9]+/")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('unknown', 'timeout', 'alive', 'scmp'):
            raise ValueError("must be one of enum values ('unknown', 'timeout', 'alive', 'scmp')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Path:
        """Create an instance of Path from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in hops (list)
        _items = []
        if self.hops:
            for _item in self.hops:
                if _item:
                    _items.append(_item.to_dict())
            _dict['hops'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Path:
        """Create an instance of Path from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Path.parse_obj(obj)

        _obj = Path.parse_obj({
            "fingerprint": obj.get("fingerprint"),
            "hops": [Hop.from_dict(_item) for _item in obj.get("hops")] if obj.get("hops") is not None else None,
            "next_hop": obj.get("next_hop"),
            "expiry": obj.get("expiry"),
            "mtu": obj.get("mtu"),
            "latency": obj.get("latency"),
            "status": obj.get("status"),
            "local_ip": obj.get("local_ip")
        })
        return _obj


