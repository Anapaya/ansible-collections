# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: 0.1.0
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from ansible.module_utils.appliance_api_client.models.config_scion_tunneling_static_announcement import ConfigScionTunnelingStaticAnnouncement

class TestConfigScionTunnelingStaticAnnouncement(unittest.TestCase):
    """ConfigScionTunnelingStaticAnnouncement unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConfigScionTunnelingStaticAnnouncement:
        """Test ConfigScionTunnelingStaticAnnouncement
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConfigScionTunnelingStaticAnnouncement`
        """
        model = ConfigScionTunnelingStaticAnnouncement()
        if include_optional:
            return ConfigScionTunnelingStaticAnnouncement(
                description = '',
                next_hop_tracking = ansible.module_utils.appliance_api_client.models.config_scion_tunneling_static_announcement_next_hop_tracking.Config_ScionTunneling_StaticAnnouncement_NextHopTracking(
                    disabled = True, 
                    target = '192.168.0.1', ),
                prefixes = ["192.168.1.0/24","172.30.100.0/28"],
                sequence_id = 1
            )
        else:
            return ConfigScionTunnelingStaticAnnouncement(
                prefixes = ["192.168.1.0/24","172.30.100.0/28"],
                sequence_id = 1,
        )
        """

    def testConfigScionTunnelingStaticAnnouncement(self):
        """Test ConfigScionTunnelingStaticAnnouncement"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
