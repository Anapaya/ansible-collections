# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from ansible.module_utils.appliance_api_client.models.config_cluster_peer_scion_tunneling_endpoint import ConfigClusterPeerScionTunnelingEndpoint

class ConfigClusterPeerScionTunneling(BaseModel):
    """
    The relevant SCION tunneling configuration of the peer. This is used so that all appliances can announce the full list of SCION tunneling endpoints in the AS to other ASes.  # noqa: E501
    """
    endpoint: Optional[ConfigClusterPeerScionTunnelingEndpoint] = None
    __properties = ["endpoint"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigClusterPeerScionTunneling:
        """Create an instance of ConfigClusterPeerScionTunneling from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of endpoint
        if self.endpoint:
            _dict['endpoint'] = self.endpoint.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigClusterPeerScionTunneling:
        """Create an instance of ConfigClusterPeerScionTunneling from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigClusterPeerScionTunneling.parse_obj(obj)

        _obj = ConfigClusterPeerScionTunneling.parse_obj({
            "endpoint": ConfigClusterPeerScionTunnelingEndpoint.from_dict(obj.get("endpoint")) if obj.get("endpoint") is not None else None
        })
        return _obj


