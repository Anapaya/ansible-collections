# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, conint

class ConfigSCIONASNeighborInterfaceBFD(BaseModel):
    """
    SCION interface BFD configuration. BFD is used to detect faults on the link to the neighbor AS.  # noqa: E501
    """
    desired_minimum_tx_interval: Optional[StrictInt] = Field(None, description="The minimum interval between transmission of BFD control packets that the operator desires. This value is advertised to the peer, however the actual interval used is specified by taking the maximum of desired-minimum-tx-interval and the value of the remote required-minimum-receive interval value. This value is specified as an integer number of microseconds.")
    detection_multiplier: Optional[conint(strict=True, le=0, ge=1)] = Field(None, description="The number of packets that must be missed to declare this session as down. The detection interval for the BFD session is calculated by multiplying the value of the negotiated transmission interval by this value.")
    enabled: Optional[StrictBool] = Field(True, description="If set to true, then the BFD session is enabled on the SCION interface - if it is set to false, BFD is disabled on that SCION interface. When disabled, the health of the interface is not tracked and it is assumed to be healthy. Note that the remote side of this SCION interface should have the same setting for enabled.")
    required_minimum_receive: Optional[StrictInt] = Field(None, description="The minimum interval between received BFD control packets that this system should support. This value is advertised to the remote peer to indicate the maximum frequency (i.e., minimum inter-packet interval) between BFD control packets that is acceptable to the local system.")
    __properties = ["desired_minimum_tx_interval", "detection_multiplier", "enabled", "required_minimum_receive"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigSCIONASNeighborInterfaceBFD:
        """Create an instance of ConfigSCIONASNeighborInterfaceBFD from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigSCIONASNeighborInterfaceBFD:
        """Create an instance of ConfigSCIONASNeighborInterfaceBFD from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigSCIONASNeighborInterfaceBFD.parse_obj(obj)

        _obj = ConfigSCIONASNeighborInterfaceBFD.parse_obj({
            "desired_minimum_tx_interval": obj.get("desired_minimum_tx_interval"),
            "detection_multiplier": obj.get("detection_multiplier"),
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else True,
            "required_minimum_receive": obj.get("required_minimum_receive")
        })
        return _obj


