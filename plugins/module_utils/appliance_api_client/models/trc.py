# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator
from ansible.module_utils.appliance_api_client.models.trcid import TRCID
from ansible.module_utils.appliance_api_client.models.validity import Validity

class TRC(BaseModel):
    """
    TRC
    """
    id: TRCID = Field(...)
    validity: Validity = Field(...)
    core_ases: conlist(constr(strict=True)) = Field(...)
    authoritative_ases: conlist(constr(strict=True)) = Field(...)
    description: StrictStr = Field(...)
    blob: Optional[StrictStr] = None
    __properties = ["id", "validity", "core_ases", "authoritative_ases", "description", "blob"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TRC:
        """Create an instance of TRC from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of validity
        if self.validity:
            _dict['validity'] = self.validity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TRC:
        """Create an instance of TRC from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TRC.parse_obj(obj)

        _obj = TRC.parse_obj({
            "id": TRCID.from_dict(obj.get("id")) if obj.get("id") is not None else None,
            "validity": Validity.from_dict(obj.get("validity")) if obj.get("validity") is not None else None,
            "core_ases": obj.get("core_ases"),
            "authoritative_ases": obj.get("authoritative_ases"),
            "description": obj.get("description"),
            "blob": obj.get("blob")
        })
        return _obj


