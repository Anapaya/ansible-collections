# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import Field, StrictStr
from ansible.module_utils.appliance_api_client.models.domain_has_paths_to_remote import DomainHasPathsToRemote
from ansible.module_utils.appliance_api_client.models.domain_has_paths_to_remote_data import DomainHasPathsToRemoteData
from ansible.module_utils.appliance_api_client.models.health_component import HealthComponent
from ansible.module_utils.appliance_api_client.models.health_status import HealthStatus

class DomainHasPathsToRemoteWrapped(DomainHasPathsToRemote):
    """
    DomainHasPathsToRemoteWrapped
    """
    component: HealthComponent = Field(...)
    service_name: StrictStr = Field(..., description="Name of the service that the health check applies to.")
    __properties = ["check_id", "name", "status", "detail", "data", "component", "service_name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DomainHasPathsToRemoteWrapped:
        """Create an instance of DomainHasPathsToRemoteWrapped from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DomainHasPathsToRemoteWrapped:
        """Create an instance of DomainHasPathsToRemoteWrapped from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DomainHasPathsToRemoteWrapped.parse_obj(obj)

        _obj = DomainHasPathsToRemoteWrapped.parse_obj({
            "check_id": obj.get("check_id"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "detail": obj.get("detail"),
            "data": DomainHasPathsToRemoteData.from_dict(obj.get("data")) if obj.get("data") is not None else None,
            "component": obj.get("component"),
            "service_name": obj.get("service_name")
        })
        return _obj


