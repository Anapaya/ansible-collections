# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, constr, validator

class TracerouteHopInfo(BaseModel):
    """
    TracerouteHopInfo
    """
    isd_as: constr(strict=True) = Field(...)
    ip: StrictStr = Field(..., description="IP address of the router responding to the traceroute request.")
    interface_id: StrictInt = Field(..., description="SCION interface identifier.")
    round_trip_times: conlist(StrictStr) = Field(...)
    __properties = ["isd_as", "ip", "interface_id", "round_trip_times"]

    @validator('isd_as')
    def isd_as_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TracerouteHopInfo:
        """Create an instance of TracerouteHopInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TracerouteHopInfo:
        """Create an instance of TracerouteHopInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TracerouteHopInfo.parse_obj(obj)

        _obj = TracerouteHopInfo.parse_obj({
            "isd_as": obj.get("isd_as"),
            "ip": obj.get("ip"),
            "interface_id": obj.get("interface_id"),
            "round_trip_times": obj.get("round_trip_times")
        })
        return _obj


