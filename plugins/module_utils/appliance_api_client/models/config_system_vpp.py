# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from ansible.module_utils.appliance_api_client.models.config_system_vpp_buffers import ConfigSystemVppBuffers
from ansible.module_utils.appliance_api_client.models.config_system_vpp_connection import ConfigSystemVppConnection
from ansible.module_utils.appliance_api_client.models.config_system_vpp_cpu import ConfigSystemVppCpu
from ansible.module_utils.appliance_api_client.models.config_system_vpp_tun import ConfigSystemVppTun
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ConfigSystemVpp(BaseModel):
    """
    Anapaya appliance VPP configuration.
    """ # noqa: E501
    buffers: Optional[ConfigSystemVppBuffers] = None
    connection: Optional[ConfigSystemVppConnection] = None
    cpu: Optional[ConfigSystemVppCpu] = None
    poll_sleep: Optional[StrictStr] = Field(default='0s', description="The fixed-sleep between main loop polls in the VPP dataplane.  It requires a unit suffix out of ['d', 'h', 'm', 's', 'ms', 'us', 'ns'].  The encoding consists of a decimal number concatenated with a  suffix; for example, '5us', '10m', '12h', and '1d'.  Setting it to 0 disables the fixed-sleep.")
    tun: Optional[ConfigSystemVppTun] = None
    __properties: ClassVar[List[str]] = ["buffers", "connection", "cpu", "poll_sleep", "tun"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ConfigSystemVpp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of buffers
        if self.buffers:
            _dict['buffers'] = self.buffers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of connection
        if self.connection:
            _dict['connection'] = self.connection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cpu
        if self.cpu:
            _dict['cpu'] = self.cpu.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tun
        if self.tun:
            _dict['tun'] = self.tun.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ConfigSystemVpp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buffers": ConfigSystemVppBuffers.from_dict(obj.get("buffers")) if obj.get("buffers") is not None else None,
            "connection": ConfigSystemVppConnection.from_dict(obj.get("connection")) if obj.get("connection") is not None else None,
            "cpu": ConfigSystemVppCpu.from_dict(obj.get("cpu")) if obj.get("cpu") is not None else None,
            "poll_sleep": obj.get("poll_sleep") if obj.get("poll_sleep") is not None else '0s',
            "tun": ConfigSystemVppTun.from_dict(obj.get("tun")) if obj.get("tun") is not None else None
        })
        return _obj


