# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from ansible.module_utils.appliance_api_client.models.tier_mapping import TierMapping

class FeatureMapping(BaseModel):
    """
    Describes for each product and tier what features are allowed.   # noqa: E501
    """
    edge: Optional[TierMapping] = None
    core: Optional[TierMapping] = None
    gate: Optional[TierMapping] = None
    other: Optional[TierMapping] = None
    __properties = ["edge", "core", "gate", "other"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FeatureMapping:
        """Create an instance of FeatureMapping from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of edge
        if self.edge:
            _dict['edge'] = self.edge.to_dict()
        # override the default output from pydantic by calling `to_dict()` of core
        if self.core:
            _dict['core'] = self.core.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gate
        if self.gate:
            _dict['gate'] = self.gate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of other
        if self.other:
            _dict['other'] = self.other.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FeatureMapping:
        """Create an instance of FeatureMapping from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FeatureMapping.parse_obj(obj)

        _obj = FeatureMapping.parse_obj({
            "edge": TierMapping.from_dict(obj.get("edge")) if obj.get("edge") is not None else None,
            "core": TierMapping.from_dict(obj.get("core")) if obj.get("core") is not None else None,
            "gate": TierMapping.from_dict(obj.get("gate")) if obj.get("gate") is not None else None,
            "other": TierMapping.from_dict(obj.get("other")) if obj.get("other") is not None else None
        })
        return _obj


