# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: 0.1.0
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictInt
from pydantic import Field
from openapi_client.models.link_relationship import LinkRelationship
from openapi_client.models.link_state import LinkState
from openapi_client.models.scion_interface_endpoint import ScionInterfaceEndpoint
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DebugScionInterface(BaseModel):
    """
    DebugScionInterface
    """ # noqa: E501
    local: ScionInterfaceEndpoint
    remote: ScionInterfaceEndpoint
    relationship: LinkRelationship
    mtu: StrictInt = Field(description="The MTU of the SCION interface")
    state: LinkState
    __properties: ClassVar[List[str]] = ["local", "remote", "relationship", "mtu", "state"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DebugScionInterface from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of local
        if self.local:
            _dict['local'] = self.local.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remote
        if self.remote:
            _dict['remote'] = self.remote.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DebugScionInterface from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "local": ScionInterfaceEndpoint.from_dict(obj.get("local")) if obj.get("local") is not None else None,
            "remote": ScionInterfaceEndpoint.from_dict(obj.get("remote")) if obj.get("remote") is not None else None,
            "relationship": obj.get("relationship"),
            "mtu": obj.get("mtu"),
            "state": obj.get("state")
        })
        return _obj


