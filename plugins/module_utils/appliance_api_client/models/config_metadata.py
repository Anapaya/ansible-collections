# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr

class ConfigMetadata(BaseModel):
    """
    ConfigMetadata
    """
    release_version: StrictStr = Field(..., description="The version of the SCION package installed on the appliance.")
    system_version: StrictStr = Field(..., description="The version of the system package installed on the appliance. If the value cannot be returned, the version will be marked as \"unknown\".")
    __properties = ["release_version", "system_version"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigMetadata:
        """Create an instance of ConfigMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigMetadata:
        """Create an instance of ConfigMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigMetadata.parse_obj(obj)

        _obj = ConfigMetadata.parse_obj({
            "release_version": obj.get("release_version"),
            "system_version": obj.get("system_version")
        })
        return _obj


