# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: 0.1.0
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from openapi_client.models.config_interfaces_vlan_gateway import ConfigInterfacesVlanGateway
from openapi_client.models.config_interfaces_vlan_neighbor import ConfigInterfacesVlanNeighbor
from openapi_client.models.config_interfaces_vlan_route import ConfigInterfacesVlanRoute
from openapi_client.models.config_interfaces_vlan_vrrp import ConfigInterfacesVlanVrrp
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ConfigInterfacesVlan(BaseModel):
    """
    List of VLAN interfaces.
    """ # noqa: E501
    accept_ra: Optional[StrictBool] = Field(default=False, description="Whether to accept the route advertisements for the corresponding interface. (This is currently supported only for the interfaces that are using the Linux driver.)")
    addresses: Optional[List[StrictStr]] = Field(default=None, description="The addresses configured on this interface. Each address must be a valid IP prefix in CIDR notation.")
    gateway: Optional[ConfigInterfacesVlanGateway] = None
    id: Annotated[int, Field(le=4095, strict=True)] = Field(description="The VLAN ID of the VLAN interface. It ranges between 0 and 4095.")
    link: StrictStr = Field(description="The name of the physical interface used for this VLAN.")
    mac: Optional[StrictStr] = Field(default=None, description="The MAC address to use on this interface. It is of the form `XX:XX:XX:XX:XX:XX`.")
    mtu: Optional[StrictInt] = Field(default=1500, description="The MTU (Maximum Transmission Unit) to be used on this interface.")
    name: StrictStr = Field(description="The name of the network interface.")
    neighbors: Optional[List[ConfigInterfacesVlanNeighbor]] = Field(default=None, description="The static neighbors configured on this network interface.")
    routes: Optional[List[ConfigInterfacesVlanRoute]] = Field(default=None, description="The routes which are configured on this network interface.")
    rx_queue_size: Optional[StrictInt] = Field(default=1024, description="The number of descriptors in the receive queue. (This option is currently supported only for VPP interfaces.)")
    tx_queue_size: Optional[StrictInt] = Field(default=1024, description="The number of descriptors in the transmit queue. (This is currently supported only for VPP interfaces.)")
    vrrp: Optional[List[ConfigInterfacesVlanVrrp]] = Field(default=None, description="The VRRP (Virtual Router Redundancy Protocol) configurations for this interface.")
    __properties: ClassVar[List[str]] = ["accept_ra", "addresses", "gateway", "id", "link", "mac", "mtu", "name", "neighbors", "routes", "rx_queue_size", "tx_queue_size", "vrrp"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ConfigInterfacesVlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gateway
        if self.gateway:
            _dict['gateway'] = self.gateway.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in neighbors (list)
        _items = []
        if self.neighbors:
            for _item in self.neighbors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['neighbors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in routes (list)
        _items = []
        if self.routes:
            for _item in self.routes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['routes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vrrp (list)
        _items = []
        if self.vrrp:
            for _item in self.vrrp:
                if _item:
                    _items.append(_item.to_dict())
            _dict['vrrp'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ConfigInterfacesVlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accept_ra": obj.get("accept_ra") if obj.get("accept_ra") is not None else False,
            "addresses": obj.get("addresses"),
            "gateway": ConfigInterfacesVlanGateway.from_dict(obj.get("gateway")) if obj.get("gateway") is not None else None,
            "id": obj.get("id"),
            "link": obj.get("link"),
            "mac": obj.get("mac"),
            "mtu": obj.get("mtu") if obj.get("mtu") is not None else 1500,
            "name": obj.get("name"),
            "neighbors": [ConfigInterfacesVlanNeighbor.from_dict(_item) for _item in obj.get("neighbors")] if obj.get("neighbors") is not None else None,
            "routes": [ConfigInterfacesVlanRoute.from_dict(_item) for _item in obj.get("routes")] if obj.get("routes") is not None else None,
            "rx_queue_size": obj.get("rx_queue_size") if obj.get("rx_queue_size") is not None else 1024,
            "tx_queue_size": obj.get("tx_queue_size") if obj.get("tx_queue_size") is not None else 1024,
            "vrrp": [ConfigInterfacesVlanVrrp.from_dict(_item) for _item in obj.get("vrrp")] if obj.get("vrrp") is not None else None
        })
        return _obj


