# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from ansible.module_utils.appliance_api_client.models.max_or_unlimited import MaxOrUnlimited

class SCIONFeatures(BaseModel):
    """
    The SCION features  # noqa: E501
    """
    max_ases: Optional[MaxOrUnlimited] = None
    max_parent_links: Optional[MaxOrUnlimited] = None
    __properties = ["max_ases", "max_parent_links"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SCIONFeatures:
        """Create an instance of SCIONFeatures from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of max_ases
        if self.max_ases:
            _dict['max_ases'] = self.max_ases.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_parent_links
        if self.max_parent_links:
            _dict['max_parent_links'] = self.max_parent_links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SCIONFeatures:
        """Create an instance of SCIONFeatures from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SCIONFeatures.parse_obj(obj)

        _obj = SCIONFeatures.parse_obj({
            "max_ases": MaxOrUnlimited.from_dict(obj.get("max_ases")) if obj.get("max_ases") is not None else None,
            "max_parent_links": MaxOrUnlimited.from_dict(obj.get("max_parent_links")) if obj.get("max_parent_links") is not None else None
        })
        return _obj


