# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator

class ConfigAdvancedServiceCustomization(BaseModel):
    """
    List of service customizations that should be configured on the Anapaya appliance system, uniquely identified by the service type.  # noqa: E501
    """
    disabled: Optional[StrictBool] = Field(False, description="Whether the service customization should be disabled.")
    service_type: StrictStr = Field(..., description="The service type for which the customized template is provided.")
    template: StrictStr = Field(..., description="The actual customized template for the service.")
    __properties = ["disabled", "service_type", "template"]

    @validator('service_type')
    def service_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('CA_FRONTEND', 'CONTROL', 'CRON', 'DAEMON', 'DATAPLANE', 'DATAPLANE_CONTROL', 'DISPATCHER', 'FRR', 'FRR_EXPORTER', 'GATEWAY', 'MOLE', 'NODE_EXPORTER', 'PROMTAIL', 'ROUTER', 'TELEMETRY'):
            raise ValueError("must be one of enum values ('CA_FRONTEND', 'CONTROL', 'CRON', 'DAEMON', 'DATAPLANE', 'DATAPLANE_CONTROL', 'DISPATCHER', 'FRR', 'FRR_EXPORTER', 'GATEWAY', 'MOLE', 'NODE_EXPORTER', 'PROMTAIL', 'ROUTER', 'TELEMETRY')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigAdvancedServiceCustomization:
        """Create an instance of ConfigAdvancedServiceCustomization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigAdvancedServiceCustomization:
        """Create an instance of ConfigAdvancedServiceCustomization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigAdvancedServiceCustomization.parse_obj(obj)

        _obj = ConfigAdvancedServiceCustomization.parse_obj({
            "disabled": obj.get("disabled") if obj.get("disabled") is not None else False,
            "service_type": obj.get("service_type"),
            "template": obj.get("template")
        })
        return _obj


