# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from ansible.module_utils.appliance_api_client.models.config_scionasca_service import ConfigSCIONASCAService  # noqa: E501

class TestConfigSCIONASCAService(unittest.TestCase):
    """ConfigSCIONASCAService unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConfigSCIONASCAService:
        """Test ConfigSCIONASCAService
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConfigSCIONASCAService`
        """
        model = ConfigSCIONASCAService()  # noqa: E501
        if include_optional:
            return ConfigSCIONASCAService(
                anapaya_vault = ansible.module_utils.appliance_api_client.models.config_scion_as_ca_service_anapaya_vault.Config_SCION_AS_CAService_AnapayaVault(
                    addresses = [
                        ''
                        ], 
                    credentials = ansible.module_utils.appliance_api_client.models.config_scion_as_ca_service_anapaya_vault_credentials.Config_SCION_AS_CAService_AnapayaVault_Credentials(
                        role_id = '', 
                        secret_id = '', ), 
                    validation = ansible.module_utils.appliance_api_client.models.config_scion_as_ca_service_anapaya_vault_validation.Config_SCION_AS_CAService_AnapayaVault_Validation(
                        subject = 'MATCHING_ISD_AS', ), ),
                external = ansible.module_utils.appliance_api_client.models.config_scion_as_ca_service_external.Config_SCION_AS_CAService_External(
                    address = '192.0.2.3:5000', 
                    client_id = '', 
                    shared_secret = 'shared secret', ),
                service_type = 'EXTERNAL'
            )
        else:
            return ConfigSCIONASCAService(
        )
        """

    def testConfigSCIONASCAService(self):
        """Test ConfigSCIONASCAService"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
