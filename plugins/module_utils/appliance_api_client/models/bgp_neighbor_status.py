# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class BGPNeighborStatus(BaseModel):
    """
    BGPNeighborStatus
    """ # noqa: E501
    neighbor: StrictStr = Field(description="ID of the neighbor.")
    remote_as: StrictInt = Field(description="Remote BGP AS number.")
    family: StrictStr = Field(description="Protocol family.")
    state: StrictStr = Field(description="State of the session to the neighbor.")
    uptime: StrictInt = Field(description="Uptime of the session to the neighbor in milliseconds.")
    number_of_sent_prefixes: StrictInt = Field(description="Number of prefixes sent to the neighbor.")
    number_of_received_prefixes: StrictInt = Field(description="Number of prefixes received from the neighbor.")
    __properties: ClassVar[List[str]] = ["neighbor", "remote_as", "family", "state", "uptime", "number_of_sent_prefixes", "number_of_received_prefixes"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of BGPNeighborStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of BGPNeighborStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "neighbor": obj.get("neighbor"),
            "remote_as": obj.get("remote_as"),
            "family": obj.get("family"),
            "state": obj.get("state"),
            "uptime": obj.get("uptime"),
            "number_of_sent_prefixes": obj.get("number_of_sent_prefixes"),
            "number_of_received_prefixes": obj.get("number_of_received_prefixes")
        })
        return _obj


