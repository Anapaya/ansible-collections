# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: 0.1.0
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ConfigAdvancedServiceCustomizations(BaseModel):
    """
    List of service customizations that should be configured on the Anapaya appliance system, uniquely identified by the service type.
    """ # noqa: E501
    disabled: Optional[StrictBool] = Field(default=False, description="Whether the service customization should be disabled.")
    service_type: StrictStr = Field(description="The service type for which the customized template is provided.")
    template: StrictStr = Field(description="The actual customized template for the service.")
    __properties: ClassVar[List[str]] = ["disabled", "service_type", "template"]

    @field_validator('service_type')
    def service_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('CONTROL', 'ROUTER', 'DISPATCHER', 'DAEMON', 'GATEWAY', 'CA_FRONTEND', 'DATAPLANE_CONTROL', 'MOLE', 'CRON', 'TELEMETRY', 'FRR', 'FRR_EXPORTER', 'NODE_EXPORTER', 'PROMTAIL'):
            raise ValueError("must be one of enum values ('CONTROL', 'ROUTER', 'DISPATCHER', 'DAEMON', 'GATEWAY', 'CA_FRONTEND', 'DATAPLANE_CONTROL', 'MOLE', 'CRON', 'TELEMETRY', 'FRR', 'FRR_EXPORTER', 'NODE_EXPORTER', 'PROMTAIL')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ConfigAdvancedServiceCustomizations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ConfigAdvancedServiceCustomizations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disabled": obj.get("disabled") if obj.get("disabled") is not None else False,
            "service_type": obj.get("service_type"),
            "template": obj.get("template")
        })
        return _obj


