# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ConfigInterfacesEthernetRoute(BaseModel):
    """
    List of routes belonging to this interface.
    """ # noqa: E501
    comment: Optional[StrictStr] = Field(default=None, description="An optional human-readable string to comment on this route.")
    var_from: Optional[StrictStr] = Field(default=None, description="The source IP address for traffic going through the route.", alias="from")
    metric: Optional[StrictInt] = Field(default=10, description="The metric for the route. The lower its value, the higher its priority.")
    sequence_id: StrictInt = Field(description="The sequence id determines the order of the route entries.")
    to: StrictStr = Field(description="The destination prefix in CIDR notation of this route.")
    via: StrictStr = Field(description="The next hop address which should be used for the prefix.")
    __properties: ClassVar[List[str]] = ["comment", "from", "metric", "sequence_id", "to", "via"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ConfigInterfacesEthernetRoute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ConfigInterfacesEthernetRoute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comment": obj.get("comment"),
            "from": obj.get("from"),
            "metric": obj.get("metric") if obj.get("metric") is not None else 10,
            "sequence_id": obj.get("sequence_id"),
            "to": obj.get("to"),
            "via": obj.get("via")
        })
        return _obj


