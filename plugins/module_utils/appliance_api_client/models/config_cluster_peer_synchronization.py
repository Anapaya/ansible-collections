# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ConfigClusterPeerSynchronization(BaseModel):
    """
    The synchronization configuration for this peer. This can be used to configure the automatic synchronization of topology information and supported features. Automatic synchronization of topology and supported features is not recommended for EDGE deployments. Instead static configuration is recommended. This field can not be set together with the scion, scion-tunneling, and features field.  # noqa: E501
    """
    address: Optional[StrictStr] = Field(None, description="The gRPC address of this peer, used for synchronization of appliance information")
    __properties = ["address"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigClusterPeerSynchronization:
        """Create an instance of ConfigClusterPeerSynchronization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigClusterPeerSynchronization:
        """Create an instance of ConfigClusterPeerSynchronization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigClusterPeerSynchronization.parse_obj(obj)

        _obj = ConfigClusterPeerSynchronization.parse_obj({
            "address": obj.get("address")
        })
        return _obj


