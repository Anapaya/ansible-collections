# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from ansible.module_utils.appliance_api_client.models.config_scion_tunneling_domain_prefixes_accept_filter_entry import ConfigScionTunnelingDomainPrefixesAcceptFilterEntry  # noqa: E501

class TestConfigScionTunnelingDomainPrefixesAcceptFilterEntry(unittest.TestCase):
    """ConfigScionTunnelingDomainPrefixesAcceptFilterEntry unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConfigScionTunnelingDomainPrefixesAcceptFilterEntry:
        """Test ConfigScionTunnelingDomainPrefixesAcceptFilterEntry
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConfigScionTunnelingDomainPrefixesAcceptFilterEntry`
        """
        model = ConfigScionTunnelingDomainPrefixesAcceptFilterEntry()  # noqa: E501
        if include_optional:
            return ConfigScionTunnelingDomainPrefixesAcceptFilterEntry(
                action = 'ACCEPT',
                description = '',
                prefixes = ["192.168.1.0/24"],
                sequence_id = 1
            )
        else:
            return ConfigScionTunnelingDomainPrefixesAcceptFilterEntry(
                action = 'ACCEPT',
                sequence_id = 1,
        )
        """

    def testConfigScionTunnelingDomainPrefixesAcceptFilterEntry(self):
        """Test ConfigScionTunnelingDomainPrefixesAcceptFilterEntry"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
