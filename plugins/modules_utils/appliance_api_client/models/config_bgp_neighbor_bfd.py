# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: 0.1.0
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ConfigBgpNeighborBfd(BaseModel):
    """
    BFD configuration parameters relating to the BGP neighbor
    """ # noqa: E501
    desired_minimum_tx_interval: Optional[Annotated[int, Field(le=60000, strict=True, ge=10)]] = Field(default=300, description="Minimum desired control packet transmission interval in milliseconds")
    detection_multiplier: Optional[Annotated[int, Field(strict=True, ge=2)]] = Field(default=3, description="Local session detection multiplier")
    enabled: Optional[StrictBool] = Field(default=False, description="Enable BFD for the BGP neighbor")
    local_address: Optional[StrictStr] = Field(default=None, description="Local address to use for BFD")
    minimum_ttl: Optional[Annotated[int, Field(le=254, strict=True, ge=1)]] = Field(default=254, description="For multihop sessions only: configure the minimum expected TTL for an incoming BFD control packet.")
    multihop: Optional[StrictBool] = Field(default=False, description="Enable BFD multihop")
    required_minimum_receive: Optional[Annotated[int, Field(le=60000, strict=True, ge=10)]] = Field(default=300, description="Minimum required control packet receive interval in milliseconds")
    __properties: ClassVar[List[str]] = ["desired_minimum_tx_interval", "detection_multiplier", "enabled", "local_address", "minimum_ttl", "multihop", "required_minimum_receive"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ConfigBgpNeighborBfd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ConfigBgpNeighborBfd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "desired_minimum_tx_interval": obj.get("desired_minimum_tx_interval") if obj.get("desired_minimum_tx_interval") is not None else 300,
            "detection_multiplier": obj.get("detection_multiplier") if obj.get("detection_multiplier") is not None else 3,
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else False,
            "local_address": obj.get("local_address"),
            "minimum_ttl": obj.get("minimum_ttl") if obj.get("minimum_ttl") is not None else 254,
            "multihop": obj.get("multihop") if obj.get("multihop") is not None else False,
            "required_minimum_receive": obj.get("required_minimum_receive") if obj.get("required_minimum_receive") is not None else 300
        })
        return _obj


