# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ConfigManagementApiOauthIdentityProvider(BaseModel):
    """
    The id of the identity provider.
    """ # noqa: E501
    base_auth_url: Optional[StrictStr] = Field(default=None, description="The base URL for the identity provider.")
    client_id: Optional[StrictStr] = Field(default=None, description="The client ID for this identity provider.")
    client_secret: Optional[StrictStr] = Field(default=None, description="The client secret for this identity provider.")
    id: Optional[StrictStr] = Field(default=None, description="The identifier of the provider. Must be unique among all providers.")
    metadata_url: Optional[StrictStr] = Field(default=None, description="The URL for fetching the open ID configuration.")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The tenant ID for Azure AD")
    type: Optional[StrictStr] = Field(default=None, description="The type of the provider.")
    __properties: ClassVar[List[str]] = ["base_auth_url", "client_id", "client_secret", "id", "metadata_url", "tenant_id", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('GENERIC', 'AZURE_AD'):
            raise ValueError("must be one of enum values ('GENERIC', 'AZURE_AD')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ConfigManagementApiOauthIdentityProvider from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ConfigManagementApiOauthIdentityProvider from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "base_auth_url": obj.get("base_auth_url"),
            "client_id": obj.get("client_id"),
            "client_secret": obj.get("client_secret"),
            "id": obj.get("id"),
            "metadata_url": obj.get("metadata_url"),
            "tenant_id": obj.get("tenant_id"),
            "type": obj.get("type")
        })
        return _obj


