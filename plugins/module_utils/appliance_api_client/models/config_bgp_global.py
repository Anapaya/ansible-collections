# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist

class ConfigBgpGlobal(BaseModel):
    """
    Global configuration for the BGP router  # noqa: E501
    """
    var_as: Optional[StrictInt] = Field(None, alias="as", description="Local BGP autonomous system number of the router. Uses the 32-bit as-number type from the model in RFC 6991.")
    networks: Optional[conlist(StrictStr)] = Field(None, description="The list of network prefixes this BGP instance advertises.")
    router_id: Optional[StrictStr] = Field(None, description="Router id of the router - an unsigned 32-bit integer expressed in dotted quad notation.")
    src_address: Optional[StrictStr] = Field(None, description="Set the preferred source address when installing routes in the kernel.")
    __properties = ["as", "networks", "router_id", "src_address"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigBgpGlobal:
        """Create an instance of ConfigBgpGlobal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigBgpGlobal:
        """Create an instance of ConfigBgpGlobal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigBgpGlobal.parse_obj(obj)

        _obj = ConfigBgpGlobal.parse_obj({
            "var_as": obj.get("as"),
            "networks": obj.get("networks"),
            "router_id": obj.get("router_id"),
            "src_address": obj.get("src_address")
        })
        return _obj


