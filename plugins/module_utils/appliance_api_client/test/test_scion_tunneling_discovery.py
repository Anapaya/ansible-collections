# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from ansible.module_utils.appliance_api_client.models.scion_tunneling_discovery import ScionTunnelingDiscovery  # noqa: E501

class TestScionTunnelingDiscovery(unittest.TestCase):
    """ScionTunnelingDiscovery unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ScionTunnelingDiscovery:
        """Test ScionTunnelingDiscovery
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ScionTunnelingDiscovery`
        """
        model = ScionTunnelingDiscovery()  # noqa: E501
        if include_optional:
            return ScionTunnelingDiscovery(
                sessions = [
                    ansible.module_utils.appliance_api_client.models.scion_tunneling_discovery_session.ScionTunnelingDiscoverySession(
                        local_isd_as = '1-ff00:0:110', 
                        remote_isd_as = '1-ff00:0:110', 
                        path = '', 
                        peers = [
                            ansible.module_utils.appliance_api_client.models.scion_tunneling_discovery_peer.ScionTunnelingDiscoveryPeer(
                                control = '', 
                                data = '', 
                                probe = '', 
                                interfaces = [
                                    56
                                    ], )
                            ], 
                        last_success = '', 
                        error = '', )
                    ]
            )
        else:
            return ScionTunnelingDiscovery(
                sessions = [
                    ansible.module_utils.appliance_api_client.models.scion_tunneling_discovery_session.ScionTunnelingDiscoverySession(
                        local_isd_as = '1-ff00:0:110', 
                        remote_isd_as = '1-ff00:0:110', 
                        path = '', 
                        peers = [
                            ansible.module_utils.appliance_api_client.models.scion_tunneling_discovery_peer.ScionTunnelingDiscoveryPeer(
                                control = '', 
                                data = '', 
                                probe = '', 
                                interfaces = [
                                    56
                                    ], )
                            ], 
                        last_success = '', 
                        error = '', )
                    ],
        )
        """

    def testScionTunnelingDiscovery(self):
        """Test ScionTunnelingDiscovery"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
