# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: 0.1.0
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PingUpdate(BaseModel):
    """
    PingUpdate
    """ # noqa: E501
    scion_packet_size: StrictInt = Field(description="Size of the entire SCION packet in bytes. This includes the SCION common header, and the SCION path header.")
    source_isd_as: Annotated[str, Field(strict=True)]
    source_host: StrictStr = Field(description="Source host address")
    scmp_seq: StrictInt = Field(description="SCMP sequence number")
    round_trip_time: StrictStr
    state: StrictStr = Field(description="Status describing the outcome of a ping response.")
    __properties: ClassVar[List[str]] = ["scion_packet_size", "source_isd_as", "source_host", "scmp_seq", "round_trip_time", "state"]

    @field_validator('source_isd_as')
    def source_isd_as_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$/")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('success', 'after_timeout', 'out_of_order', 'duplicate'):
            raise ValueError("must be one of enum values ('success', 'after_timeout', 'out_of_order', 'duplicate')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PingUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PingUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "scion_packet_size": obj.get("scion_packet_size"),
            "source_isd_as": obj.get("source_isd_as"),
            "source_host": obj.get("source_host"),
            "scmp_seq": obj.get("scmp_seq"),
            "round_trip_time": obj.get("round_trip_time"),
            "state": obj.get("state")
        })
        return _obj


