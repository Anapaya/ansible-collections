# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from ansible.module_utils.appliance_api_client.models.config_scionasca_service_anapaya_vault import ConfigSCIONASCAServiceAnapayaVault
from ansible.module_utils.appliance_api_client.models.config_scionasca_service_external import ConfigSCIONASCAServiceExternal

class ConfigSCIONASCAService(BaseModel):
    """
    SCION CPPKI (Control Plane Public Key Infrastructure) CA service configuration data. This section defines how the anapaya-scion interacts with the SCION CPPKI CA service backend. It is only required for SCION ASes that act as a CA in their respective ISD.  # noqa: E501
    """
    anapaya_vault: Optional[ConfigSCIONASCAServiceAnapayaVault] = None
    external: Optional[ConfigSCIONASCAServiceExternal] = None
    service_type: Optional[StrictStr] = Field(None, description="The type of CA service that is used by the appliance.")
    __properties = ["anapaya_vault", "external", "service_type"]

    @validator('service_type')
    def service_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('EXTERNAL', 'ANAPAYA_VAULT', 'IN_PROCESS'):
            raise ValueError("must be one of enum values ('EXTERNAL', 'ANAPAYA_VAULT', 'IN_PROCESS')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigSCIONASCAService:
        """Create an instance of ConfigSCIONASCAService from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of anapaya_vault
        if self.anapaya_vault:
            _dict['anapaya_vault'] = self.anapaya_vault.to_dict()
        # override the default output from pydantic by calling `to_dict()` of external
        if self.external:
            _dict['external'] = self.external.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigSCIONASCAService:
        """Create an instance of ConfigSCIONASCAService from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigSCIONASCAService.parse_obj(obj)

        _obj = ConfigSCIONASCAService.parse_obj({
            "anapaya_vault": ConfigSCIONASCAServiceAnapayaVault.from_dict(obj.get("anapaya_vault")) if obj.get("anapaya_vault") is not None else None,
            "external": ConfigSCIONASCAServiceExternal.from_dict(obj.get("external")) if obj.get("external") is not None else None,
            "service_type": obj.get("service_type")
        })
        return _obj


