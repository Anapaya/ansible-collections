# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: 0.1.0
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.trc import TRC

class TestTRC(unittest.TestCase):
    """TRC unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TRC:
        """Test TRC
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TRC`
        """
        model = TRC()
        if include_optional:
            return TRC(
                id = openapi_client.models.trc_identifier.TRC Identifier(
                    isd = 15, 
                    base_number = 1, 
                    serial_number = 3, ),
                validity = openapi_client.models.validity_period.Validity period(
                    not_before = '2021-01-04T09:59:33Z', 
                    not_after = '2022-01-04T09:59:33Z', ),
                core_ases = [
                    '1-ff00:0:110'
                    ],
                authoritative_ases = [
                    '1-ff00:0:110'
                    ],
                description = '',
                blob = ''
            )
        else:
            return TRC(
                id = openapi_client.models.trc_identifier.TRC Identifier(
                    isd = 15, 
                    base_number = 1, 
                    serial_number = 3, ),
                validity = openapi_client.models.validity_period.Validity period(
                    not_before = '2021-01-04T09:59:33Z', 
                    not_after = '2022-01-04T09:59:33Z', ),
                core_ases = [
                    '1-ff00:0:110'
                    ],
                authoritative_ases = [
                    '1-ff00:0:110'
                    ],
                description = '',
        )
        """

    def testTRC(self):
        """Test TRC"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
