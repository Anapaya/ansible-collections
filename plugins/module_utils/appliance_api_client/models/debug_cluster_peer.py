# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class DebugClusterPeer(BaseModel):
    """
    DebugClusterPeer
    """
    name: StrictStr = Field(..., description="The name of the peer.")
    address: StrictStr = Field(..., description="The address of the peer.")
    last_sync_attempt: datetime = Field(..., description="The time of the last synchronization attempt.")
    status: StrictStr = Field(..., description="The status of the last synchronization attempt.")
    error: Optional[StrictStr] = Field(None, description="The reason for the failure of the last synchronization. Only present if the status is failure. ")
    __properties = ["name", "address", "last_sync_attempt", "status", "error"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('success', 'failure'):
            raise ValueError("must be one of enum values ('success', 'failure')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DebugClusterPeer:
        """Create an instance of DebugClusterPeer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DebugClusterPeer:
        """Create an instance of DebugClusterPeer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DebugClusterPeer.parse_obj(obj)

        _obj = DebugClusterPeer.parse_obj({
            "name": obj.get("name"),
            "address": obj.get("address"),
            "last_sync_attempt": obj.get("last_sync_attempt"),
            "status": obj.get("status"),
            "error": obj.get("error")
        })
        return _obj


