# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, validator

class ConfigSystemResourcesServiceLimit(BaseModel):
    """
    Per service resource limits.  # noqa: E501
    """
    cpu: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The CPU limit in number of fractional CPU cores that can be used by the service. If not specified, a sensible default is chosen by the system. If set to 0, the service is not limited in terms of CPU usage.")
    memory: Optional[StrictStr] = Field(None, description="The memory limit in bytes that can be used by the service. The limit can be specified using a string of the format <decimal><suffix>, where suffix can either be empty or one of 'K', 'k', 'M', 'm', 'G', 'g' or 'T', 't'. Note that the step between the suffixes is 1024. If not specified, a sensible default is chosen by the system. If set to 0, the service is not limited in terms of memory usage. The minimum value is 6M.")
    name: StrictStr = Field(..., description="Name of the service.")
    __properties = ["cpu", "memory", "name"]

    @validator('name')
    def name_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('CA_FRONTEND', 'CONTROL', 'CRON', 'DAEMON', 'DATAPLANE', 'DATAPLANE_CONTROL', 'DISPATCHER', 'FRR', 'FRR_EXPORTER', 'GATEWAY', 'MOLE', 'NODE_EXPORTER', 'PROMTAIL', 'ROUTER', 'TELEMETRY'):
            raise ValueError("must be one of enum values ('CA_FRONTEND', 'CONTROL', 'CRON', 'DAEMON', 'DATAPLANE', 'DATAPLANE_CONTROL', 'DISPATCHER', 'FRR', 'FRR_EXPORTER', 'GATEWAY', 'MOLE', 'NODE_EXPORTER', 'PROMTAIL', 'ROUTER', 'TELEMETRY')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigSystemResourcesServiceLimit:
        """Create an instance of ConfigSystemResourcesServiceLimit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigSystemResourcesServiceLimit:
        """Create an instance of ConfigSystemResourcesServiceLimit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigSystemResourcesServiceLimit.parse_obj(obj)

        _obj = ConfigSystemResourcesServiceLimit.parse_obj({
            "cpu": obj.get("cpu"),
            "memory": obj.get("memory"),
            "name": obj.get("name")
        })
        return _obj


