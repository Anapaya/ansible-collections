# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool

class ConfigClusterFeatures(BaseModel):
    """
    The list of feature that are announced to the peers. Note that the actually announced value can depend on whether what features is locally enabled and configured.  # noqa: E501
    """
    scion_rss: Optional[StrictBool] = Field(True, description="Option to enable the announcement of support for the SCION RSS feature to the peers. If the local host does not support the SCION RSS feature, this option does not have any effect.")
    __properties = ["scion_rss"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigClusterFeatures:
        """Create an instance of ConfigClusterFeatures from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigClusterFeatures:
        """Create an instance of ConfigClusterFeatures from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigClusterFeatures.parse_obj(obj)

        _obj = ConfigClusterFeatures.parse_obj({
            "scion_rss": obj.get("scion_rss") if obj.get("scion_rss") is not None else True
        })
        return _obj


