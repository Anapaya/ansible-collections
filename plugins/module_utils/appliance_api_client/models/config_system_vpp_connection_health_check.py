# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class ConfigSystemVppConnectionHealthCheck(BaseModel):
    """
    Health check configuration.  # noqa: E501
    """
    probe_interval: Optional[StrictStr] = Field('1s', description="The interval in which a health check probe is sent to the VPP dataplane.  It requires a unit suffix out of ['d', 'h', 'm', 's', 'ms', 'us', 'ns'].  The encoding consists of a decimal number concatenated with a  suffix; for example, '5us', '10m', '12h', and '1d'.")
    reply_timeout: Optional[StrictStr] = Field('250ms', description="The time in which VPP control services expect a reply from the VPP dataplane.  It requires a unit suffix out of ['d', 'h', 'm', 's', 'ms', 'us', 'ns'].  The encoding consists of a decimal number concatenated with a  suffix; for example, '5us', '10m', '12h', and '1d'.")
    threshold: Optional[StrictInt] = Field(3, description="The number of health checks, from VPP control services to the VPP dataplane, that are allowed to time out before the connection is considered dead.")
    __properties = ["probe_interval", "reply_timeout", "threshold"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigSystemVppConnectionHealthCheck:
        """Create an instance of ConfigSystemVppConnectionHealthCheck from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigSystemVppConnectionHealthCheck:
        """Create an instance of ConfigSystemVppConnectionHealthCheck from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigSystemVppConnectionHealthCheck.parse_obj(obj)

        _obj = ConfigSystemVppConnectionHealthCheck.parse_obj({
            "probe_interval": obj.get("probe_interval") if obj.get("probe_interval") is not None else '1s',
            "reply_timeout": obj.get("reply_timeout") if obj.get("reply_timeout") is not None else '250ms',
            "threshold": obj.get("threshold") if obj.get("threshold") is not None else 3
        })
        return _obj


