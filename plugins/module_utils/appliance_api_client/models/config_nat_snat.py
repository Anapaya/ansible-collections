# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class ConfigNatSnat(BaseModel):
    """
    Top-level configuration and state for the source NAT.  # noqa: E501
    """
    address_pool: Optional[conlist(StrictStr)] = Field(None, description="The list of IP prefixes to use as the source NAT pool.")
    exclude: Optional[conlist(StrictStr)] = Field(None, description="The list of IP prefixes to exclude from the NAT. The number of IP addresses that can be excluded is limited.")
    interfaces: Optional[conlist(StrictStr)] = Field(None, description="The list of interfaces to do the NAT. These are typically interfaces connected to the local network")
    __properties = ["address_pool", "exclude", "interfaces"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigNatSnat:
        """Create an instance of ConfigNatSnat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigNatSnat:
        """Create an instance of ConfigNatSnat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigNatSnat.parse_obj(obj)

        _obj = ConfigNatSnat.parse_obj({
            "address_pool": obj.get("address_pool"),
            "exclude": obj.get("exclude"),
            "interfaces": obj.get("interfaces")
        })
        return _obj


