# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import Field, StrictStr, validator
from ansible.module_utils.appliance_api_client.models.schemas_validity import SchemasValidity
from ansible.module_utils.appliance_api_client.models.trc_info import TRCInfo

class TRCForLocalISDAvailableInfo(TRCInfo):
    """
    TRCForLocalISDAvailableInfo
    """
    validity: SchemasValidity = Field(...)
    grace_period_end: datetime = Field(..., description="The time until the previous unexpired version of the TRC should be considered active. ")
    data_type: StrictStr = Field(...)
    __properties = ["id", "isd", "base", "serial", "validity", "grace_period_end", "data_type"]

    @validator('data_type')
    def data_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('available'):
            raise ValueError("must be one of enum values ('available')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TRCForLocalISDAvailableInfo:
        """Create an instance of TRCForLocalISDAvailableInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of validity
        if self.validity:
            _dict['validity'] = self.validity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TRCForLocalISDAvailableInfo:
        """Create an instance of TRCForLocalISDAvailableInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TRCForLocalISDAvailableInfo.parse_obj(obj)

        _obj = TRCForLocalISDAvailableInfo.parse_obj({
            "id": obj.get("id"),
            "isd": obj.get("isd"),
            "base": obj.get("base"),
            "serial": obj.get("serial"),
            "validity": SchemasValidity.from_dict(obj.get("validity")) if obj.get("validity") is not None else None,
            "grace_period_end": obj.get("grace_period_end"),
            "data_type": obj.get("data_type")
        })
        return _obj


