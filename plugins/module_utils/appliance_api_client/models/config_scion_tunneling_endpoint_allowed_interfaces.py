# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist

class ConfigScionTunnelingEndpointAllowedInterfaces(BaseModel):
    """
    List of configurations for allowed interfaces.  # noqa: E501
    """
    interfaces: Optional[conlist(StrictInt)] = Field(None, description="List of allowed interfaces for this SCION AS")
    isd_as: Optional[StrictStr] = Field(None, description="The SCION AS where the list of allowed interfaces applies. Packets to this IP-in-SCION tunnel endpoint in this SCION AS will only arrive on the listed interfaces.")
    __properties = ["interfaces", "isd_as"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigScionTunnelingEndpointAllowedInterfaces:
        """Create an instance of ConfigScionTunnelingEndpointAllowedInterfaces from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigScionTunnelingEndpointAllowedInterfaces:
        """Create an instance of ConfigScionTunnelingEndpointAllowedInterfaces from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigScionTunnelingEndpointAllowedInterfaces.parse_obj(obj)

        _obj = ConfigScionTunnelingEndpointAllowedInterfaces.parse_obj({
            "interfaces": obj.get("interfaces"),
            "isd_as": obj.get("isd_as")
        })
        return _obj


