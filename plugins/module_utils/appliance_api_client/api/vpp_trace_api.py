# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr

from typing import Optional


from ansible.module_utils.appliance_api_client.api_client import ApiClient
from ansible.module_utils.appliance_api_client.api_response import ApiResponse
from ansible.module_utils.appliance_api_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class VppTraceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_debug_vpp_trace(self, n : Annotated[Optional[StrictStr], Field(description="VPP node to trace.")] = None, i : Annotated[Optional[StrictStr], Field(description="Include only packets passing through the specified VPP node. Include and exclude parameters are mutually exclusive.")] = None, e : Annotated[Optional[StrictStr], Field(description="Exclude packets passing through the specified VPP node. Include and exclude parameters are mutually exclusive.")] = None, t : Annotated[Optional[StrictInt], Field(description="Timeout (in ms) for the trace to be stopped.")] = None, p : Annotated[Optional[StrictInt], Field(description="maximum number of packets to return.")] = None, **kwargs) -> str:  # noqa: E501
        """Action path to execute free form packet trace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_debug_vpp_trace(n, i, e, t, p, async_req=True)
        >>> result = thread.get()

        :param n: VPP node to trace.
        :type n: str
        :param i: Include only packets passing through the specified VPP node. Include and exclude parameters are mutually exclusive.
        :type i: str
        :param e: Exclude packets passing through the specified VPP node. Include and exclude parameters are mutually exclusive.
        :type e: str
        :param t: Timeout (in ms) for the trace to be stopped.
        :type t: int
        :param p: maximum number of packets to return.
        :type p: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_debug_vpp_trace_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_debug_vpp_trace_with_http_info(n, i, e, t, p, **kwargs)  # noqa: E501

    @validate_arguments
    def get_debug_vpp_trace_with_http_info(self, n : Annotated[Optional[StrictStr], Field(description="VPP node to trace.")] = None, i : Annotated[Optional[StrictStr], Field(description="Include only packets passing through the specified VPP node. Include and exclude parameters are mutually exclusive.")] = None, e : Annotated[Optional[StrictStr], Field(description="Exclude packets passing through the specified VPP node. Include and exclude parameters are mutually exclusive.")] = None, t : Annotated[Optional[StrictInt], Field(description="Timeout (in ms) for the trace to be stopped.")] = None, p : Annotated[Optional[StrictInt], Field(description="maximum number of packets to return.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Action path to execute free form packet trace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_debug_vpp_trace_with_http_info(n, i, e, t, p, async_req=True)
        >>> result = thread.get()

        :param n: VPP node to trace.
        :type n: str
        :param i: Include only packets passing through the specified VPP node. Include and exclude parameters are mutually exclusive.
        :type i: str
        :param e: Exclude packets passing through the specified VPP node. Include and exclude parameters are mutually exclusive.
        :type e: str
        :param t: Timeout (in ms) for the trace to be stopped.
        :type t: int
        :param p: maximum number of packets to return.
        :type p: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'n',
            'i',
            'e',
            't',
            'p'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_debug_vpp_trace" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('n') is not None:  # noqa: E501
            _query_params.append(('n', _params['n']))

        if _params.get('i') is not None:  # noqa: E501
            _query_params.append(('i', _params['i']))

        if _params.get('e') is not None:  # noqa: E501
            _query_params.append(('e', _params['e']))

        if _params.get('t') is not None:  # noqa: E501
            _query_params.append(('t', _params['t']))

        if _params.get('p') is not None:  # noqa: E501
            _query_params.append(('p', _params['p']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json+problem'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': "Problem",
        }

        return self.api_client.call_api(
            '/debug/vpp/trace', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_debug_vpp_trace_dpdk(self, t : Annotated[Optional[StrictInt], Field(description="Timeout (in ms) for the trace to be stopped.")] = None, p : Annotated[Optional[StrictInt], Field(description="maximum number of packets to return.")] = None, **kwargs) -> str:  # noqa: E501
        """Action path to execute a trace for packets entering via DPDK.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_debug_vpp_trace_dpdk(t, p, async_req=True)
        >>> result = thread.get()

        :param t: Timeout (in ms) for the trace to be stopped.
        :type t: int
        :param p: maximum number of packets to return.
        :type p: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_debug_vpp_trace_dpdk_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_debug_vpp_trace_dpdk_with_http_info(t, p, **kwargs)  # noqa: E501

    @validate_arguments
    def get_debug_vpp_trace_dpdk_with_http_info(self, t : Annotated[Optional[StrictInt], Field(description="Timeout (in ms) for the trace to be stopped.")] = None, p : Annotated[Optional[StrictInt], Field(description="maximum number of packets to return.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Action path to execute a trace for packets entering via DPDK.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_debug_vpp_trace_dpdk_with_http_info(t, p, async_req=True)
        >>> result = thread.get()

        :param t: Timeout (in ms) for the trace to be stopped.
        :type t: int
        :param p: maximum number of packets to return.
        :type p: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            't',
            'p'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_debug_vpp_trace_dpdk" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('t') is not None:  # noqa: E501
            _query_params.append(('t', _params['t']))

        if _params.get('p') is not None:  # noqa: E501
            _query_params.append(('p', _params['p']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json+problem'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': "Problem",
        }

        return self.api_client.call_api(
            '/debug/vpp/trace/dpdk', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_debug_vpp_trace_memif(self, t : Annotated[Optional[StrictInt], Field(description="Timeout (in ms) for the trace to be stopped.")] = None, p : Annotated[Optional[StrictInt], Field(description="maximum number of packets to return.")] = None, **kwargs) -> str:  # noqa: E501
        """Action path to execute a trace for packets entering via memif.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_debug_vpp_trace_memif(t, p, async_req=True)
        >>> result = thread.get()

        :param t: Timeout (in ms) for the trace to be stopped.
        :type t: int
        :param p: maximum number of packets to return.
        :type p: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_debug_vpp_trace_memif_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_debug_vpp_trace_memif_with_http_info(t, p, **kwargs)  # noqa: E501

    @validate_arguments
    def get_debug_vpp_trace_memif_with_http_info(self, t : Annotated[Optional[StrictInt], Field(description="Timeout (in ms) for the trace to be stopped.")] = None, p : Annotated[Optional[StrictInt], Field(description="maximum number of packets to return.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Action path to execute a trace for packets entering via memif.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_debug_vpp_trace_memif_with_http_info(t, p, async_req=True)
        >>> result = thread.get()

        :param t: Timeout (in ms) for the trace to be stopped.
        :type t: int
        :param p: maximum number of packets to return.
        :type p: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            't',
            'p'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_debug_vpp_trace_memif" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('t') is not None:  # noqa: E501
            _query_params.append(('t', _params['t']))

        if _params.get('p') is not None:  # noqa: E501
            _query_params.append(('p', _params['p']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json+problem'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': "Problem",
        }

        return self.api_client.call_api(
            '/debug/vpp/trace/memif', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_debug_vpp_trace_start(self, n : Annotated[Optional[StrictStr], Field(description="VPP node to trace.")] = None, i : Annotated[Optional[StrictStr], Field(description="Include only packets passing through the specified VPP node. Include and exclude parameters are mutually exclusive.")] = None, e : Annotated[Optional[StrictStr], Field(description="Exclude packets passing through the specified VPP node. Include and exclude parameters are mutually exclusive.")] = None, p : Annotated[Optional[StrictInt], Field(description="maximum number of packets to return.")] = None, **kwargs) -> str:  # noqa: E501
        """Action path that starts a trace without timeout. The trace can be stopped with the `/vpp/trace/stop` endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_debug_vpp_trace_start(n, i, e, p, async_req=True)
        >>> result = thread.get()

        :param n: VPP node to trace.
        :type n: str
        :param i: Include only packets passing through the specified VPP node. Include and exclude parameters are mutually exclusive.
        :type i: str
        :param e: Exclude packets passing through the specified VPP node. Include and exclude parameters are mutually exclusive.
        :type e: str
        :param p: maximum number of packets to return.
        :type p: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_debug_vpp_trace_start_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_debug_vpp_trace_start_with_http_info(n, i, e, p, **kwargs)  # noqa: E501

    @validate_arguments
    def get_debug_vpp_trace_start_with_http_info(self, n : Annotated[Optional[StrictStr], Field(description="VPP node to trace.")] = None, i : Annotated[Optional[StrictStr], Field(description="Include only packets passing through the specified VPP node. Include and exclude parameters are mutually exclusive.")] = None, e : Annotated[Optional[StrictStr], Field(description="Exclude packets passing through the specified VPP node. Include and exclude parameters are mutually exclusive.")] = None, p : Annotated[Optional[StrictInt], Field(description="maximum number of packets to return.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Action path that starts a trace without timeout. The trace can be stopped with the `/vpp/trace/stop` endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_debug_vpp_trace_start_with_http_info(n, i, e, p, async_req=True)
        >>> result = thread.get()

        :param n: VPP node to trace.
        :type n: str
        :param i: Include only packets passing through the specified VPP node. Include and exclude parameters are mutually exclusive.
        :type i: str
        :param e: Exclude packets passing through the specified VPP node. Include and exclude parameters are mutually exclusive.
        :type e: str
        :param p: maximum number of packets to return.
        :type p: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'n',
            'i',
            'e',
            'p'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_debug_vpp_trace_start" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('n') is not None:  # noqa: E501
            _query_params.append(('n', _params['n']))

        if _params.get('i') is not None:  # noqa: E501
            _query_params.append(('i', _params['i']))

        if _params.get('e') is not None:  # noqa: E501
            _query_params.append(('e', _params['e']))

        if _params.get('p') is not None:  # noqa: E501
            _query_params.append(('p', _params['p']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json+problem'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': "Problem",
        }

        return self.api_client.call_api(
            '/debug/vpp/trace/start', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_debug_vpp_trace_stop(self, p : Annotated[Optional[StrictInt], Field(description="maximum number of packets to return.")] = None, **kwargs) -> str:  # noqa: E501
        """Action path that stops tracing.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_debug_vpp_trace_stop(p, async_req=True)
        >>> result = thread.get()

        :param p: maximum number of packets to return.
        :type p: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_debug_vpp_trace_stop_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_debug_vpp_trace_stop_with_http_info(p, **kwargs)  # noqa: E501

    @validate_arguments
    def get_debug_vpp_trace_stop_with_http_info(self, p : Annotated[Optional[StrictInt], Field(description="maximum number of packets to return.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Action path that stops tracing.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_debug_vpp_trace_stop_with_http_info(p, async_req=True)
        >>> result = thread.get()

        :param p: maximum number of packets to return.
        :type p: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'p'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_debug_vpp_trace_stop" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('p') is not None:  # noqa: E501
            _query_params.append(('p', _params['p']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json+problem'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': "Problem",
        }

        return self.api_client.call_api(
            '/debug/vpp/trace/stop', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_debug_vpp_trace_udp4_socket(self, t : Annotated[Optional[StrictInt], Field(description="Timeout (in ms) for the trace to be stopped.")] = None, p : Annotated[Optional[StrictInt], Field(description="maximum number of packets to return.")] = None, **kwargs) -> str:  # noqa: E501
        """Action path to execute a trace for IPv4 packets entering via VPP UDP socket.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_debug_vpp_trace_udp4_socket(t, p, async_req=True)
        >>> result = thread.get()

        :param t: Timeout (in ms) for the trace to be stopped.
        :type t: int
        :param p: maximum number of packets to return.
        :type p: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_debug_vpp_trace_udp4_socket_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_debug_vpp_trace_udp4_socket_with_http_info(t, p, **kwargs)  # noqa: E501

    @validate_arguments
    def get_debug_vpp_trace_udp4_socket_with_http_info(self, t : Annotated[Optional[StrictInt], Field(description="Timeout (in ms) for the trace to be stopped.")] = None, p : Annotated[Optional[StrictInt], Field(description="maximum number of packets to return.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Action path to execute a trace for IPv4 packets entering via VPP UDP socket.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_debug_vpp_trace_udp4_socket_with_http_info(t, p, async_req=True)
        >>> result = thread.get()

        :param t: Timeout (in ms) for the trace to be stopped.
        :type t: int
        :param p: maximum number of packets to return.
        :type p: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            't',
            'p'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_debug_vpp_trace_udp4_socket" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('t') is not None:  # noqa: E501
            _query_params.append(('t', _params['t']))

        if _params.get('p') is not None:  # noqa: E501
            _query_params.append(('p', _params['p']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json+problem'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': "Problem",
        }

        return self.api_client.call_api(
            '/debug/vpp/trace/udp4-socket', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_debug_vpp_trace_udp6_socket(self, t : Annotated[Optional[StrictInt], Field(description="Timeout (in ms) for the trace to be stopped.")] = None, p : Annotated[Optional[StrictInt], Field(description="maximum number of packets to return.")] = None, **kwargs) -> str:  # noqa: E501
        """Action path to execute a trace for IPv6 packets entering via VPP UDP socket.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_debug_vpp_trace_udp6_socket(t, p, async_req=True)
        >>> result = thread.get()

        :param t: Timeout (in ms) for the trace to be stopped.
        :type t: int
        :param p: maximum number of packets to return.
        :type p: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_debug_vpp_trace_udp6_socket_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_debug_vpp_trace_udp6_socket_with_http_info(t, p, **kwargs)  # noqa: E501

    @validate_arguments
    def get_debug_vpp_trace_udp6_socket_with_http_info(self, t : Annotated[Optional[StrictInt], Field(description="Timeout (in ms) for the trace to be stopped.")] = None, p : Annotated[Optional[StrictInt], Field(description="maximum number of packets to return.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Action path to execute a trace for IPv6 packets entering via VPP UDP socket.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_debug_vpp_trace_udp6_socket_with_http_info(t, p, async_req=True)
        >>> result = thread.get()

        :param t: Timeout (in ms) for the trace to be stopped.
        :type t: int
        :param p: maximum number of packets to return.
        :type p: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            't',
            'p'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_debug_vpp_trace_udp6_socket" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('t') is not None:  # noqa: E501
            _query_params.append(('t', _params['t']))

        if _params.get('p') is not None:  # noqa: E501
            _query_params.append(('p', _params['p']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json+problem'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': "Problem",
        }

        return self.api_client.call_api(
            '/debug/vpp/trace/udp6-socket', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_debug_vpp_trace_virtio(self, t : Annotated[Optional[StrictInt], Field(description="Timeout (in ms) for the trace to be stopped.")] = None, p : Annotated[Optional[StrictInt], Field(description="maximum number of packets to return.")] = None, **kwargs) -> str:  # noqa: E501
        """Action path to execute a trace for packets entering via TUN/TAP.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_debug_vpp_trace_virtio(t, p, async_req=True)
        >>> result = thread.get()

        :param t: Timeout (in ms) for the trace to be stopped.
        :type t: int
        :param p: maximum number of packets to return.
        :type p: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_debug_vpp_trace_virtio_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_debug_vpp_trace_virtio_with_http_info(t, p, **kwargs)  # noqa: E501

    @validate_arguments
    def get_debug_vpp_trace_virtio_with_http_info(self, t : Annotated[Optional[StrictInt], Field(description="Timeout (in ms) for the trace to be stopped.")] = None, p : Annotated[Optional[StrictInt], Field(description="maximum number of packets to return.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Action path to execute a trace for packets entering via TUN/TAP.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_debug_vpp_trace_virtio_with_http_info(t, p, async_req=True)
        >>> result = thread.get()

        :param t: Timeout (in ms) for the trace to be stopped.
        :type t: int
        :param p: maximum number of packets to return.
        :type p: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            't',
            'p'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_debug_vpp_trace_virtio" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('t') is not None:  # noqa: E501
            _query_params.append(('t', _params['t']))

        if _params.get('p') is not None:  # noqa: E501
            _query_params.append(('p', _params['p']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json+problem'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': "Problem",
        }

        return self.api_client.call_api(
            '/debug/vpp/trace/virtio', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
