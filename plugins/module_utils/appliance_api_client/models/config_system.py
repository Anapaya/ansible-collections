# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from ansible.module_utils.appliance_api_client.models.config_system_dns import ConfigSystemDns
from ansible.module_utils.appliance_api_client.models.config_system_kernel import ConfigSystemKernel
from ansible.module_utils.appliance_api_client.models.config_system_ntp import ConfigSystemNtp
from ansible.module_utils.appliance_api_client.models.config_system_resources import ConfigSystemResources
from ansible.module_utils.appliance_api_client.models.config_system_vpp import ConfigSystemVpp

class ConfigSystem(BaseModel):
    """
    The necessary configuration data for the system of the Anapaya appliance.  # noqa: E501
    """
    dns: Optional[ConfigSystemDns] = None
    kernel: Optional[ConfigSystemKernel] = None
    ntp: Optional[ConfigSystemNtp] = None
    resources: Optional[ConfigSystemResources] = None
    vpp: Optional[ConfigSystemVpp] = None
    __properties = ["dns", "kernel", "ntp", "resources", "vpp"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigSystem:
        """Create an instance of ConfigSystem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of dns
        if self.dns:
            _dict['dns'] = self.dns.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kernel
        if self.kernel:
            _dict['kernel'] = self.kernel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ntp
        if self.ntp:
            _dict['ntp'] = self.ntp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resources
        if self.resources:
            _dict['resources'] = self.resources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vpp
        if self.vpp:
            _dict['vpp'] = self.vpp.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigSystem:
        """Create an instance of ConfigSystem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigSystem.parse_obj(obj)

        _obj = ConfigSystem.parse_obj({
            "dns": ConfigSystemDns.from_dict(obj.get("dns")) if obj.get("dns") is not None else None,
            "kernel": ConfigSystemKernel.from_dict(obj.get("kernel")) if obj.get("kernel") is not None else None,
            "ntp": ConfigSystemNtp.from_dict(obj.get("ntp")) if obj.get("ntp") is not None else None,
            "resources": ConfigSystemResources.from_dict(obj.get("resources")) if obj.get("resources") is not None else None,
            "vpp": ConfigSystemVpp.from_dict(obj.get("vpp")) if obj.get("vpp") is not None else None
        })
        return _obj


