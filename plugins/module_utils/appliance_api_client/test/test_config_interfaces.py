# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from ansible.module_utils.appliance_api_client.models.config_interfaces import ConfigInterfaces

class TestConfigInterfaces(unittest.TestCase):
    """ConfigInterfaces unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConfigInterfaces:
        """Test ConfigInterfaces
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConfigInterfaces`
        """
        model = ConfigInterfaces()
        if include_optional:
            return ConfigInterfaces(
                bonds = [
                    ansible.module_utils.appliance_api_client.models.config_interfaces_bond.Config_Interfaces_Bond(
                        accept_ra = True, 
                        addresses = [
                            ''
                            ], 
                        gateway = ansible.module_utils.appliance_api_client.models.config_interfaces_bond_gateway.Config_Interfaces_Bond_Gateway(
                            ipv4_gateway = '', 
                            ipv6_gateway = '', ), 
                        interfaces = [
                            ''
                            ], 
                        mac = '', 
                        mtu = 1472, 
                        name = '', 
                        neighbors = [
                            ansible.module_utils.appliance_api_client.models.config_interfaces_bond_neighbor.Config_Interfaces_Bond_Neighbor(
                                address = '', 
                                comment = '', 
                                mac = '', 
                                sequence_id = 3, )
                            ], 
                        routes = [
                            ansible.module_utils.appliance_api_client.models.config_interfaces_bond_route.Config_Interfaces_Bond_Route(
                                comment = '', 
                                from = '', 
                                metric = 56, 
                                sequence_id = 3, 
                                to = '', 
                                via = '', )
                            ], 
                        rx_queue_size = 2048, 
                        tx_queue_size = 2048, 
                        vrrp = [
                            ansible.module_utils.appliance_api_client.models.config_interfaces_bond_vrrp.Config_Interfaces_Bond_Vrrp(
                                addresses = [
                                    ''
                                    ], 
                                no_preempt = True, 
                                peers = [
                                    ''
                                    ], 
                                priority = 17, 
                                vrid = 3, )
                            ], )
                    ],
                ethernets = [
                    ansible.module_utils.appliance_api_client.models.config_interfaces_ethernet.Config_Interfaces_Ethernet(
                        accept_ra = True, 
                        addresses = [
                            ''
                            ], 
                        driver = 'LINUX', 
                        gateway = ansible.module_utils.appliance_api_client.models.config_interfaces_ethernet_gateway.Config_Interfaces_Ethernet_Gateway(
                            ipv4_gateway = '', 
                            ipv6_gateway = '', ), 
                        mac = '', 
                        mtu = 1472, 
                        name = '', 
                        neighbors = [
                            ansible.module_utils.appliance_api_client.models.config_interfaces_ethernet_neighbor.Config_Interfaces_Ethernet_Neighbor(
                                address = '', 
                                comment = '', 
                                mac = '', 
                                sequence_id = 3, )
                            ], 
                        routes = [
                            ansible.module_utils.appliance_api_client.models.config_interfaces_ethernet_route.Config_Interfaces_Ethernet_Route(
                                comment = '', 
                                from = '', 
                                metric = 56, 
                                sequence_id = 3, 
                                to = '', 
                                via = '', )
                            ], 
                        rx_queue_size = 2048, 
                        tx_queue_size = 2048, 
                        vpp = ansible.module_utils.appliance_api_client.models.config_interfaces_ethernet_vpp.Config_Interfaces_Ethernet_Vpp(
                            vlan_strip_offload = True, ), 
                        vrrp = [
                            ansible.module_utils.appliance_api_client.models.config_interfaces_ethernet_vrrp.Config_Interfaces_Ethernet_Vrrp(
                                addresses = [
                                    ''
                                    ], 
                                no_preempt = True, 
                                peers = [
                                    ''
                                    ], 
                                priority = 17, 
                                vrid = 3, )
                            ], )
                    ],
                loopbacks = [
                    ansible.module_utils.appliance_api_client.models.config_interfaces_loopback.Config_Interfaces_Loopback(
                        addresses = [
                            ''
                            ], 
                        name = '', )
                    ],
                virtual_functions = [
                    ansible.module_utils.appliance_api_client.models.config_interfaces_virtual_function.Config_Interfaces_VirtualFunction(
                        accept_ra = True, 
                        addresses = [
                            ''
                            ], 
                        gateway = ansible.module_utils.appliance_api_client.models.config_interfaces_virtual_function_gateway.Config_Interfaces_VirtualFunction_Gateway(
                            ipv4_gateway = '', 
                            ipv6_gateway = '', ), 
                        link = '', 
                        mac = '', 
                        mtu = 1472, 
                        name = '', 
                        neighbors = [
                            ansible.module_utils.appliance_api_client.models.config_interfaces_virtual_function_neighbor.Config_Interfaces_VirtualFunction_Neighbor(
                                address = '', 
                                comment = '', 
                                mac = '', 
                                sequence_id = 3, )
                            ], 
                        routes = [
                            ansible.module_utils.appliance_api_client.models.config_interfaces_virtual_function_route.Config_Interfaces_VirtualFunction_Route(
                                comment = '', 
                                from = '', 
                                metric = 56, 
                                sequence_id = 3, 
                                to = '', 
                                via = '', )
                            ], 
                        rx_queue_size = 2048, 
                        tx_queue_size = 2048, 
                        vrrp = [
                            ansible.module_utils.appliance_api_client.models.config_interfaces_virtual_function_vrrp.Config_Interfaces_VirtualFunction_Vrrp(
                                addresses = [
                                    ''
                                    ], 
                                no_preempt = True, 
                                peers = [
                                    ''
                                    ], 
                                priority = 17, 
                                vrid = 3, )
                            ], )
                    ],
                vlans = [
                    ansible.module_utils.appliance_api_client.models.config_interfaces_vlan.Config_Interfaces_Vlan(
                        accept_ra = True, 
                        addresses = [
                            ''
                            ], 
                        gateway = ansible.module_utils.appliance_api_client.models.config_interfaces_vlan_gateway.Config_Interfaces_Vlan_Gateway(
                            ipv4_gateway = '', 
                            ipv6_gateway = '', ), 
                        id = 56, 
                        link = '', 
                        mac = '', 
                        mtu = 1472, 
                        name = '', 
                        neighbors = [
                            ansible.module_utils.appliance_api_client.models.config_interfaces_vlan_neighbor.Config_Interfaces_Vlan_Neighbor(
                                address = '', 
                                comment = '', 
                                mac = '', 
                                sequence_id = 3, )
                            ], 
                        routes = [
                            ansible.module_utils.appliance_api_client.models.config_interfaces_vlan_route.Config_Interfaces_Vlan_Route(
                                comment = '', 
                                from = '', 
                                metric = 56, 
                                sequence_id = 3, 
                                to = '', 
                                via = '', )
                            ], 
                        rx_queue_size = 2048, 
                        tx_queue_size = 2048, 
                        vrrp = [
                            ansible.module_utils.appliance_api_client.models.config_interfaces_vlan_vrrp.Config_Interfaces_Vlan_Vrrp(
                                addresses = [
                                    ''
                                    ], 
                                no_preempt = True, 
                                peers = [
                                    ''
                                    ], 
                                priority = 17, 
                                vrid = 3, )
                            ], )
                    ],
                wireguards = [
                    ansible.module_utils.appliance_api_client.models.config_interfaces_wireguard.Config_Interfaces_Wireguard(
                        addresses = [
                            ''
                            ], 
                        gateway = ansible.module_utils.appliance_api_client.models.config_interfaces_wireguard_gateway.Config_Interfaces_Wireguard_Gateway(
                            ipv4_gateway = '', 
                            ipv6_gateway = '', ), 
                        mtu = 56, 
                        name = '', 
                        peers = [
                            ansible.module_utils.appliance_api_client.models.config_interfaces_wireguard_peer.Config_Interfaces_Wireguard_Peer(
                                allowed_ips = [
                                    ''
                                    ], 
                                endpoint = '', 
                                public_key = '', )
                            ], 
                        pointopoint = '', 
                        port = 56, 
                        routes = [
                            ansible.module_utils.appliance_api_client.models.config_interfaces_wireguard_route.Config_Interfaces_Wireguard_Route(
                                comment = '', 
                                from = '', 
                                metric = 56, 
                                sequence_id = 3, 
                                to = '', 
                                via = '', )
                            ], )
                    ]
            )
        else:
            return ConfigInterfaces(
        )
        """

    def testConfigInterfaces(self):
        """Test ConfigInterfaces"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
