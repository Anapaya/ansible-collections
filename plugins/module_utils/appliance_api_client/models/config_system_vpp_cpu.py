# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class ConfigSystemVppCpu(BaseModel):
    """
    CPU configuration.  # noqa: E501
    """
    corelist_workers: Optional[StrictStr] = Field(None, description="The list of CPU cores to be used by the workers. The cores are pinned to the workers in the order they are listed. The format for the list is A,B1-Bn,C1-Cn. This setting is mutually exclusive with workers and the list must not contain the main-core.")
    main_core: Optional[StrictInt] = Field(1, description="The logical CPU core where main thread runs.")
    workers: Optional[StrictInt] = Field(None, description="The number of workers to be created for VPP. The workers are pinned to consecutive CPU cores. If set to 0, packet processing is performed by the main-core")
    __properties = ["corelist_workers", "main_core", "workers"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigSystemVppCpu:
        """Create an instance of ConfigSystemVppCpu from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigSystemVppCpu:
        """Create an instance of ConfigSystemVppCpu from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigSystemVppCpu.parse_obj(obj)

        _obj = ConfigSystemVppCpu.parse_obj({
            "corelist_workers": obj.get("corelist_workers"),
            "main_core": obj.get("main_core") if obj.get("main_core") is not None else 1,
            "workers": obj.get("workers")
        })
        return _obj


