# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class ConfigInterfacesEthernetNeighbor(BaseModel):
    """
    List of neighbors configured on this interface.  # noqa: E501
    """
    address: StrictStr = Field(..., description="The IP address.")
    comment: Optional[StrictStr] = Field(None, description="An optional human-readable string to comment on this neighbor.")
    mac: Optional[StrictStr] = Field(None, description="The MAC address corresponding to the address. It is of the form `XX:XX:XX:XX:XX:XX`.")
    sequence_id: StrictInt = Field(..., description="The sequence id determines the order of the neighbor entries.")
    __properties = ["address", "comment", "mac", "sequence_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigInterfacesEthernetNeighbor:
        """Create an instance of ConfigInterfacesEthernetNeighbor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigInterfacesEthernetNeighbor:
        """Create an instance of ConfigInterfacesEthernetNeighbor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigInterfacesEthernetNeighbor.parse_obj(obj)

        _obj = ConfigInterfacesEthernetNeighbor.parse_obj({
            "address": obj.get("address"),
            "comment": obj.get("comment"),
            "mac": obj.get("mac"),
            "sequence_id": obj.get("sequence_id")
        })
        return _obj


