# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator

class LicenseStatusGetResponseJson(BaseModel):
    """
    LicenseStatusGetResponseJson
    """
    status: StrictStr = Field(..., description="The status of the licensing. Indicates whether a valid license is present on the appliance, or whether the appliance is in grace period, or if the appliance functionality is restricted. ")
    license_id: Optional[StrictStr] = Field(None, description="The license ID of the license which is currently active on the appliance. Only set in valid-license status. ")
    expiry: Optional[datetime] = Field(None, description="The time up to which the current status remains unchanged without interaction. For grace and trial periods, it indicates the end of these periods, while for a license it indicates the expiration date. ")
    enforcer_disabled: Optional[StrictBool] = Field(None, description="Whether the license enforcer is disabled via feature flag. ")
    __properties = ["status", "license_id", "expiry", "enforcer_disabled"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('trial-period', 'grace-period', 'valid-license', 'restricted-functionality'):
            raise ValueError("must be one of enum values ('trial-period', 'grace-period', 'valid-license', 'restricted-functionality')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LicenseStatusGetResponseJson:
        """Create an instance of LicenseStatusGetResponseJson from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LicenseStatusGetResponseJson:
        """Create an instance of LicenseStatusGetResponseJson from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LicenseStatusGetResponseJson.parse_obj(obj)

        _obj = LicenseStatusGetResponseJson.parse_obj({
            "status": obj.get("status"),
            "license_id": obj.get("license_id"),
            "expiry": obj.get("expiry"),
            "enforcer_disabled": obj.get("enforcer_disabled")
        })
        return _obj


