# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from ansible.module_utils.appliance_api_client.models.config_scion_tunneling import ConfigScionTunneling  # noqa: E501

class TestConfigScionTunneling(unittest.TestCase):
    """ConfigScionTunneling unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConfigScionTunneling:
        """Test ConfigScionTunneling
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConfigScionTunneling`
        """
        model = ConfigScionTunneling()  # noqa: E501
        if include_optional:
            return ConfigScionTunneling(
                domains = [
                    ansible.module_utils.appliance_api_client.models.config_scion_tunneling_domain.Config_ScionTunneling_Domain(
                        default = True, 
                        description = 'The domain. It matches all packets and allows any
path to be used.', 
                        local_isd_ases = [
                            ''
                            ], 
                        name = 'Default Domain', 
                        prefixes = ansible.module_utils.appliance_api_client.models.config_scion_tunneling_domain_prefixes.Config_ScionTunneling_Domain_Prefixes(
                            accept_filter = [
                                ansible.module_utils.appliance_api_client.models.config_scion_tunneling_domain_prefixes_accept_filter_entry.Config_ScionTunneling_Domain_Prefixes_AcceptFilterEntry(
                                    action = 'ACCEPT', 
                                    description = '', 
                                    sequence_id = 1, )
                                ], 
                            announce_filter = [
                                ansible.module_utils.appliance_api_client.models.config_scion_tunneling_domain_prefixes_announce_filter_entry.Config_ScionTunneling_Domain_Prefixes_AnnounceFilterEntry(
                                    action = 'ACCEPT', 
                                    description = '', 
                                    sequence_id = 1, )
                                ], ), 
                        remote_isd_ases = [
                            ansible.module_utils.appliance_api_client.models.config_scion_tunneling_domain_remote_matcher.Config_ScionTunneling_Domain_RemoteMatcher(
                                action = 'ACCEPT', 
                                description = '', 
                                isd_as = '0-ff00:0:310', 
                                sequence_id = 1, )
                            ], 
                        traffic_policies = [
                            ansible.module_utils.appliance_api_client.models.config_scion_tunneling_domain_traffic_policy.Config_ScionTunneling_Domain_TrafficPolicy(
                                description = 'Default traffic policy', 
                                failover_sequence = [
                                    ansible.module_utils.appliance_api_client.models.config_scion_tunneling_domain_traffic_policy_failover_sequence_entry.Config_ScionTunneling_Domain_TrafficPolicy_FailoverSequenceEntry(
                                        path_filter = '', 
                                        sequence_id = 1, )
                                    ], 
                                sequence_id = 1, 
                                traffic_matcher = '', )
                            ], )
                    ],
                endpoint = ansible.module_utils.appliance_api_client.models.config_scion_tunneling_endpoint.Config_ScionTunneling_Endpoint(
                    allowed_interfaces = [
                        ansible.module_utils.appliance_api_client.models.config_scion_tunneling_endpoint_allowed_interfaces.Config_ScionTunneling_Endpoint_AllowedInterfaces(
                            interfaces = [2,3], 
                            isd_as = '', )
                        ], 
                    control_port = 40201, 
                    data_port = 40200, 
                    description = '', 
                    disable_auto_allowed_interfaces = True, 
                    disable_urpf = True, 
                    enable_scion_rss = True, 
                    enabled = True, 
                    ip = '192.168.1.100', 
                    probe_port = 40202, ),
                path_filters = [
                    ansible.module_utils.appliance_api_client.models.config_scion_tunneling_path_filter.Config_ScionTunneling_PathFilter(
                        acl = ["+ 64-0"], 
                        description = 'Match only paths in the Swiss Isolation Domain (ID 64).', 
                        hop_pattern = '0* 64+ 0+', 
                        name = 'CH ISD only', )
                    ],
                remotes = [
                    ansible.module_utils.appliance_api_client.models.config_scion_tunneling_remote.Config_ScionTunneling_Remote(
                        description = '', 
                        isd_as = '1-ff00:0:310', )
                    ],
                static_announcements = [
                    ansible.module_utils.appliance_api_client.models.config_scion_tunneling_static_announcement.Config_ScionTunneling_StaticAnnouncement(
                        description = '', 
                        next_hop_tracking = ansible.module_utils.appliance_api_client.models.config_scion_tunneling_static_announcement_next_hop_tracking.Config_ScionTunneling_StaticAnnouncement_NextHopTracking(
                            disabled = True, 
                            target = '192.168.0.1', ), 
                        prefixes = ["192.168.1.0/24","172.30.100.0/28"], 
                        sequence_id = 1, )
                    ],
                traffic_matchers = [
                    ansible.module_utils.appliance_api_client.models.config_scion_tunneling_traffic_matcher.Config_ScionTunneling_TrafficMatcher(
                        condition = 'BOOL=true', 
                        description = ''all packets' matches all packets.', 
                        name = 'all packets', )
                    ]
            )
        else:
            return ConfigScionTunneling(
        )
        """

    def testConfigScionTunneling(self):
        """Test ConfigScionTunneling"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
