# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from ansible.module_utils.appliance_api_client.models.config_management_remote_repository_cloudsmith import ConfigManagementRemoteRepositoryCloudsmith

class ConfigManagementRemoteRepository(BaseModel):
    """
    Remote repository configuration.  # noqa: E501
    """
    cloudsmith: Optional[ConfigManagementRemoteRepositoryCloudsmith] = None
    repository_type: Optional[StrictStr] = Field(None, description="The type of remote repository used for storing the software packages.")
    __properties = ["cloudsmith", "repository_type"]

    @validator('repository_type')
    def repository_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('CLOUDSMITH'):
            raise ValueError("must be one of enum values ('CLOUDSMITH')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigManagementRemoteRepository:
        """Create an instance of ConfigManagementRemoteRepository from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of cloudsmith
        if self.cloudsmith:
            _dict['cloudsmith'] = self.cloudsmith.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigManagementRemoteRepository:
        """Create an instance of ConfigManagementRemoteRepository from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigManagementRemoteRepository.parse_obj(obj)

        _obj = ConfigManagementRemoteRepository.parse_obj({
            "cloudsmith": ConfigManagementRemoteRepositoryCloudsmith.from_dict(obj.get("cloudsmith")) if obj.get("cloudsmith") is not None else None,
            "repository_type": obj.get("repository_type")
        })
        return _obj


