# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from ansible.module_utils.appliance_api_client.models.scion_tunneling_sgrp_local_prefixes_bgp import ScionTunnelingSGRPLocalPrefixesBGP
from ansible.module_utils.appliance_api_client.models.scion_tunneling_sgrp_local_prefixes_static import ScionTunnelingSGRPLocalPrefixesStatic
from ansible.module_utils.appliance_api_client.models.scion_tunneling_sgrp_local_prefixes_static_probed import ScionTunnelingSGRPLocalPrefixesStaticProbed

class ScionTunnelingSGRPLocalPrefixes(BaseModel):
    """
    ScionTunnelingSGRPLocalPrefixes
    """
    static: ScionTunnelingSGRPLocalPrefixesStatic = Field(...)
    static_probed: conlist(ScionTunnelingSGRPLocalPrefixesStaticProbed) = Field(..., alias="static-probed")
    bgp: ScionTunnelingSGRPLocalPrefixesBGP = Field(...)
    __properties = ["static", "static-probed", "bgp"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ScionTunnelingSGRPLocalPrefixes:
        """Create an instance of ScionTunnelingSGRPLocalPrefixes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of static
        if self.static:
            _dict['static'] = self.static.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in static_probed (list)
        _items = []
        if self.static_probed:
            for _item in self.static_probed:
                if _item:
                    _items.append(_item.to_dict())
            _dict['static-probed'] = _items
        # override the default output from pydantic by calling `to_dict()` of bgp
        if self.bgp:
            _dict['bgp'] = self.bgp.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ScionTunnelingSGRPLocalPrefixes:
        """Create an instance of ScionTunnelingSGRPLocalPrefixes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ScionTunnelingSGRPLocalPrefixes.parse_obj(obj)

        _obj = ScionTunnelingSGRPLocalPrefixes.parse_obj({
            "static": ScionTunnelingSGRPLocalPrefixesStatic.from_dict(obj.get("static")) if obj.get("static") is not None else None,
            "static_probed": [ScionTunnelingSGRPLocalPrefixesStaticProbed.from_dict(_item) for _item in obj.get("static-probed")] if obj.get("static-probed") is not None else None,
            "bgp": ScionTunnelingSGRPLocalPrefixesBGP.from_dict(obj.get("bgp")) if obj.get("bgp") is not None else None
        })
        return _obj


