# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr, validator
from ansible.module_utils.appliance_api_client.models.encryption_mode import EncryptionMode
from ansible.module_utils.appliance_api_client.models.scion_tunneling_domain_config_prefixes import ScionTunnelingDomainConfigPrefixes
from ansible.module_utils.appliance_api_client.models.scion_tunneling_isd_as_filter import ScionTunnelingIsdAsFilter
from ansible.module_utils.appliance_api_client.models.scion_tunneling_traffic_policy import ScionTunnelingTrafficPolicy

class ScionTunnelingDomainConfig(BaseModel):
    """
    ScionTunnelingDomainConfig
    """
    domain_name: StrictStr = Field(..., description="The name of the domain.")
    default: StrictBool = Field(..., description="True if the domain is the default domain.")
    encryption: EncryptionMode = Field(...)
    local_isd_ases: conlist(constr(strict=True)) = Field(..., description="A list of gateway local SCION ISD-ASes.")
    remote_isd_ases: conlist(ScionTunnelingIsdAsFilter) = Field(..., description="A list of remote SCION ISD-ASes.")
    prefixes: ScionTunnelingDomainConfigPrefixes = Field(...)
    traffic_policies: conlist(ScionTunnelingTrafficPolicy) = Field(..., description="A list of traffic policies.")
    __properties = ["domain_name", "default", "encryption", "local_isd_ases", "remote_isd_ases", "prefixes", "traffic_policies"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ScionTunnelingDomainConfig:
        """Create an instance of ScionTunnelingDomainConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in remote_isd_ases (list)
        _items = []
        if self.remote_isd_ases:
            for _item in self.remote_isd_ases:
                if _item:
                    _items.append(_item.to_dict())
            _dict['remote_isd_ases'] = _items
        # override the default output from pydantic by calling `to_dict()` of prefixes
        if self.prefixes:
            _dict['prefixes'] = self.prefixes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in traffic_policies (list)
        _items = []
        if self.traffic_policies:
            for _item in self.traffic_policies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['traffic_policies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ScionTunnelingDomainConfig:
        """Create an instance of ScionTunnelingDomainConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ScionTunnelingDomainConfig.parse_obj(obj)

        _obj = ScionTunnelingDomainConfig.parse_obj({
            "domain_name": obj.get("domain_name"),
            "default": obj.get("default"),
            "encryption": obj.get("encryption"),
            "local_isd_ases": obj.get("local_isd_ases"),
            "remote_isd_ases": [ScionTunnelingIsdAsFilter.from_dict(_item) for _item in obj.get("remote_isd_ases")] if obj.get("remote_isd_ases") is not None else None,
            "prefixes": ScionTunnelingDomainConfigPrefixes.from_dict(obj.get("prefixes")) if obj.get("prefixes") is not None else None,
            "traffic_policies": [ScionTunnelingTrafficPolicy.from_dict(_item) for _item in obj.get("traffic_policies")] if obj.get("traffic_policies") is not None else None
        })
        return _obj


