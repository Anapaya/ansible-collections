# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool

class ConfigManagementTelemetryLoggingLokiTlsConfig(BaseModel):
    """
    Configuration for TLS connection.  # noqa: E501
    """
    insecure_skip_verify: Optional[StrictBool] = Field(False, description="insecure-skip-verify controls whether the client verifies the Loki server's certificate chain and host name. If insecure-skip-verify is true, the appliance accepts any certificate presented by the server and any host name in that certificate. In this mode, TLS is susceptible to machine-in-the-middle attacks unless custom verification is used. This should be used only for testing.")
    __properties = ["insecure_skip_verify"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigManagementTelemetryLoggingLokiTlsConfig:
        """Create an instance of ConfigManagementTelemetryLoggingLokiTlsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigManagementTelemetryLoggingLokiTlsConfig:
        """Create an instance of ConfigManagementTelemetryLoggingLokiTlsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigManagementTelemetryLoggingLokiTlsConfig.parse_obj(obj)

        _obj = ConfigManagementTelemetryLoggingLokiTlsConfig.parse_obj({
            "insecure_skip_verify": obj.get("insecure_skip_verify") if obj.get("insecure_skip_verify") is not None else False
        })
        return _obj


