# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator
from ansible.module_utils.appliance_api_client.models.config_firewall_table_chain_rule import ConfigFirewallTableChainRule

class ConfigFirewallTableChain(BaseModel):
    """
    List of chains that are part of an nftables table, uniquely idenified by their name.  # noqa: E501
    """
    chaintype: Optional[StrictStr] = Field(None, description="The type and usage of the chain. This must be set for base chains and unset for regular chains.")
    hook: Optional[StrictStr] = Field(None, description="The packet processing step during which the chain should be executed. This must be set for base chains and unset for regular chains. For more information on the chain hooks, please refer to https://wiki.nftables.org/wiki-nftables/index.php/Configuring_chains#Base_chain_hooks.")
    name: StrictStr = Field(..., description="The name of the chain.")
    policy: Optional[StrictStr] = Field(None, description="The default policy that will be applied to packets that reach the end of the chain. For more information on chain policies, please refer to https://wiki.nftables.org/wiki-nftables/index.php/Configuring_chains#Base_chain_policy.")
    priority: Optional[StrictInt] = Field(None, description="The priority of the chain. This must be set for base chains and unset for regular chains.")
    rules: Optional[conlist(ConfigFirewallTableChainRule)] = Field(None, description="Rules defined as part of a chain within a firewall table.")
    __properties = ["chaintype", "hook", "name", "policy", "priority", "rules"]

    @validator('chaintype')
    def chaintype_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('FILTER', 'ROUTE', 'NAT'):
            raise ValueError("must be one of enum values ('FILTER', 'ROUTE', 'NAT')")
        return value

    @validator('hook')
    def hook_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('PREROUTING', 'INPUT', 'FORWARD', 'OUTPUT', 'POSTROUTING'):
            raise ValueError("must be one of enum values ('PREROUTING', 'INPUT', 'FORWARD', 'OUTPUT', 'POSTROUTING')")
        return value

    @validator('policy')
    def policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ACCEPT', 'DROP'):
            raise ValueError("must be one of enum values ('ACCEPT', 'DROP')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigFirewallTableChain:
        """Create an instance of ConfigFirewallTableChain from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        _items = []
        if self.rules:
            for _item in self.rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigFirewallTableChain:
        """Create an instance of ConfigFirewallTableChain from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigFirewallTableChain.parse_obj(obj)

        _obj = ConfigFirewallTableChain.parse_obj({
            "chaintype": obj.get("chaintype"),
            "hook": obj.get("hook"),
            "name": obj.get("name"),
            "policy": obj.get("policy"),
            "priority": obj.get("priority"),
            "rules": [ConfigFirewallTableChainRule.from_dict(_item) for _item in obj.get("rules")] if obj.get("rules") is not None else None
        })
        return _obj


