# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, constr, validator

class PingRun(BaseModel):
    """
    PingRun
    """
    destination_host: StrictStr = Field(..., description="IPv4 or IPv6 address")
    destination_isd_as: constr(strict=True) = Field(...)
    count: Optional[conint(strict=True, le=65535, ge=1)] = Field(1, description="When the parameter is set, ping sends the specified number of SCMP echo packets and reports back the statistics. If this is not set, a single SCMP echo packet is sent. ")
    source_isd_as: Optional[constr(strict=True)] = Field(None, description="If source_isd_as is unset, then the default ISD-AS from the configuration is used.")
    max_mtu: Optional[StrictBool] = Field(None, description="Choose the payload size such that the sent SCION packet including the SCION Header, SCMP echo header and payload are equal to the MTU of the path. This flag overrides the 'payload_size' flag. ")
    payload_size: Optional[conint(strict=True, ge=8)] = Field(8, description="Number of bytes to be sent in addition to the SCION Header and SCMP echo header. The total size of the packet is still variable size due to the variable size of the SCION path. ")
    sequence: Optional[StrictStr] = Field(None, description="SCION paths can be filtered according to a sequence. A sequence is a string of space separated HopPredicates. A Hop Predicate (HP) is of the form 'ISD-AS#IF,IF'. The first IF means the inbound interface (the interface where packet enters the AS) and the second IF means the outbound interface (the interface where packet leaves the AS). 0 can be used as a wildcard for ISD, AS and both IF elements independently.  HopPredicate Examples:    - Match any:                               0   - Match ISD 1:                             1   - Match AS 1-ff00:0:133:                   1-ff00:0:133   - Match IF 2 of AS 1-ff00:0:133:           1-ff00:0:133#2   - Match inbound IF 2 of AS 1-ff00:0:133:   1-ff00:0:133#2,0   - Match outbound IF 2 of AS 1-ff00:0:133:  1-ff00:0:133#0,2  Sequence Examples:  ``` sequence: \"1-ff00:0:133#0 1-ff00:0:120#2,1 0 0 1-ff00:0:110#0\" ```  The above example specifies a path from any interface in AS 1-ff00:0:133 to two subsequent interfaces in AS 1-ff00:0:120 (entering on interface 2 and exiting on interface 1), then there are two wildcards that each match any AS. The path must end with any interface in AS 1-ff00:0:110. ```   sequence: \"1-ff00:0:133#1 1+ 2-ff00:0:1? 2-ff00:0:233#1\" ``` The above example includes operators and specifies a path from interface 1-ff00:0:133#1 through multiple ASes in ISD 1, that may (but does not need to) traverse AS 2-ff00:0:1 and then reaches its destination on 2-ff00:0:233#1. Available operators:    - ? (the preceding HopPredicate may appear at most once)   - \\+ (the preceding ISD-level HopPredicate must appear at least once)   - \\* (the preceding ISD-level HopPredicate may appear zero or more times)   - | (logical OR) ")
    timeout: Optional[StrictStr] = Field('1s', description="Timeout per packet. Valid time units are \"ms\", \"s\".")
    __properties = ["destination_host", "destination_isd_as", "count", "source_isd_as", "max_mtu", "payload_size", "sequence", "timeout"]

    @validator('destination_isd_as')
    def destination_isd_as_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$/")
        return value

    @validator('source_isd_as')
    def source_isd_as_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PingRun:
        """Create an instance of PingRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PingRun:
        """Create an instance of PingRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PingRun.parse_obj(obj)

        _obj = PingRun.parse_obj({
            "destination_host": obj.get("destination_host"),
            "destination_isd_as": obj.get("destination_isd_as"),
            "count": obj.get("count") if obj.get("count") is not None else 1,
            "source_isd_as": obj.get("source_isd_as"),
            "max_mtu": obj.get("max_mtu"),
            "payload_size": obj.get("payload_size") if obj.get("payload_size") is not None else 8,
            "sequence": obj.get("sequence"),
            "timeout": obj.get("timeout") if obj.get("timeout") is not None else '1s'
        })
        return _obj


