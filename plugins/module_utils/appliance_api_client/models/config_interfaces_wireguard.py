# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from ansible.module_utils.appliance_api_client.models.config_interfaces_wireguard_gateway import ConfigInterfacesWireguardGateway
from ansible.module_utils.appliance_api_client.models.config_interfaces_wireguard_peer import ConfigInterfacesWireguardPeer
from ansible.module_utils.appliance_api_client.models.config_interfaces_wireguard_route import ConfigInterfacesWireguardRoute

class ConfigInterfacesWireguard(BaseModel):
    """
    List of Wireguard interfaces.  # noqa: E501
    """
    addresses: Optional[conlist(StrictStr)] = Field(None, description="The addresses configured on this interface. Each address must be a valid IP prefix in CIDR notation.")
    gateway: Optional[ConfigInterfacesWireguardGateway] = None
    mtu: Optional[StrictInt] = Field(1420, description="The MTU (Maximum Transmission Unit) to be used on this interface.")
    name: StrictStr = Field(..., description="The name of the network interface.")
    peers: Optional[conlist(ConfigInterfacesWireguardPeer)] = Field(None, description="The list of Wireguard peers.")
    pointopoint: Optional[StrictStr] = Field(None, description="This enables the point-to-point mode on the interface, meaning that it is a direct link between two machines with nobody else listening on it.")
    port: StrictInt = Field(..., description="The port to listen on.")
    routes: Optional[conlist(ConfigInterfacesWireguardRoute)] = Field(None, description="The routes for the network interface.")
    __properties = ["addresses", "gateway", "mtu", "name", "peers", "pointopoint", "port", "routes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigInterfacesWireguard:
        """Create an instance of ConfigInterfacesWireguard from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of gateway
        if self.gateway:
            _dict['gateway'] = self.gateway.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in peers (list)
        _items = []
        if self.peers:
            for _item in self.peers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['peers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in routes (list)
        _items = []
        if self.routes:
            for _item in self.routes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['routes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigInterfacesWireguard:
        """Create an instance of ConfigInterfacesWireguard from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigInterfacesWireguard.parse_obj(obj)

        _obj = ConfigInterfacesWireguard.parse_obj({
            "addresses": obj.get("addresses"),
            "gateway": ConfigInterfacesWireguardGateway.from_dict(obj.get("gateway")) if obj.get("gateway") is not None else None,
            "mtu": obj.get("mtu") if obj.get("mtu") is not None else 1420,
            "name": obj.get("name"),
            "peers": [ConfigInterfacesWireguardPeer.from_dict(_item) for _item in obj.get("peers")] if obj.get("peers") is not None else None,
            "pointopoint": obj.get("pointopoint"),
            "port": obj.get("port"),
            "routes": [ConfigInterfacesWireguardRoute.from_dict(_item) for _item in obj.get("routes")] if obj.get("routes") is not None else None
        })
        return _obj


