# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class ConfigInterfacesWireguardRoute(BaseModel):
    """
    List of routes belonging to this interface.  # noqa: E501
    """
    comment: Optional[StrictStr] = Field(None, description="An optional human-readable string to comment on this route.")
    var_from: Optional[StrictStr] = Field(None, alias="from", description="The source IP address for traffic going through the route.")
    metric: Optional[StrictInt] = Field(10, description="The metric for the route. The lower its value, the higher its priority.")
    sequence_id: StrictInt = Field(..., description="The sequence id determines the order of the route entries.")
    to: StrictStr = Field(..., description="The destination prefix in CIDR notation of this route.")
    via: StrictStr = Field(..., description="The next hop address which should be used for the prefix.")
    __properties = ["comment", "from", "metric", "sequence_id", "to", "via"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigInterfacesWireguardRoute:
        """Create an instance of ConfigInterfacesWireguardRoute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigInterfacesWireguardRoute:
        """Create an instance of ConfigInterfacesWireguardRoute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigInterfacesWireguardRoute.parse_obj(obj)

        _obj = ConfigInterfacesWireguardRoute.parse_obj({
            "comment": obj.get("comment"),
            "var_from": obj.get("from"),
            "metric": obj.get("metric") if obj.get("metric") is not None else 10,
            "sequence_id": obj.get("sequence_id"),
            "to": obj.get("to"),
            "via": obj.get("via")
        })
        return _obj


