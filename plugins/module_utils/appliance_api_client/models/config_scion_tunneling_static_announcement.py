# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from ansible.module_utils.appliance_api_client.models.config_scion_tunneling_static_announcement_next_hop_tracking import ConfigScionTunnelingStaticAnnouncementNextHopTracking

class ConfigScionTunnelingStaticAnnouncement(BaseModel):
    """
    List of static announcements.  # noqa: E501
    """
    description: Optional[StrictStr] = Field(None, description="Description, or comment, for the target.")
    next_hop_tracking: Optional[ConfigScionTunnelingStaticAnnouncementNextHopTracking] = None
    prefixes: conlist(StrictStr, min_items=1) = Field(..., description="The IP prefixes that are statically configured and advertised via SGRP")
    sequence_id: StrictInt = Field(..., description="The sequence ID defines the order of the static route entries. The sequence ID must be unique for each entry.")
    __properties = ["description", "next_hop_tracking", "prefixes", "sequence_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigScionTunnelingStaticAnnouncement:
        """Create an instance of ConfigScionTunnelingStaticAnnouncement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of next_hop_tracking
        if self.next_hop_tracking:
            _dict['next_hop_tracking'] = self.next_hop_tracking.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigScionTunnelingStaticAnnouncement:
        """Create an instance of ConfigScionTunnelingStaticAnnouncement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigScionTunnelingStaticAnnouncement.parse_obj(obj)

        _obj = ConfigScionTunnelingStaticAnnouncement.parse_obj({
            "description": obj.get("description"),
            "next_hop_tracking": ConfigScionTunnelingStaticAnnouncementNextHopTracking.from_dict(obj.get("next_hop_tracking")) if obj.get("next_hop_tracking") is not None else None,
            "prefixes": obj.get("prefixes"),
            "sequence_id": obj.get("sequence_id")
        })
        return _obj


