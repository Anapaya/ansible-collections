# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from ansible.module_utils.appliance_api_client.models.tools_scion_ping_post_response_json import ToolsScionPingPostResponseJson

class TestToolsScionPingPostResponseJson(unittest.TestCase):
    """ToolsScionPingPostResponseJson unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ToolsScionPingPostResponseJson:
        """Test ToolsScionPingPostResponseJson
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ToolsScionPingPostResponseJson`
        """
        model = ToolsScionPingPostResponseJson()
        if include_optional:
            return ToolsScionPingPostResponseJson(
                summary = ansible.module_utils.appliance_api_client.models.ping_summary.PingSummary(
                    path = ansible.module_utils.appliance_api_client.models.path.Path(
                        fingerprint = 'f', 
                        hops = [
                            ansible.module_utils.appliance_api_client.models.path_segment_hop.Path segment hop(
                                isd_as = '1-ff00:0:110', 
                                interface = 42, )
                            ], 
                        next_hop = '', 
                        expiry = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        mtu = 0, 
                        latency = [
                            ''
                            ], 
                        status = 'unknown', 
                        local_ip = '', ), 
                    payload_size = 56, 
                    scion_packet_size = 56, 
                    replies = [
                        ansible.module_utils.appliance_api_client.models.ping_update.PingUpdate(
                            scion_packet_size = 56, 
                            source_isd_as = '1-ff00:0:110', 
                            source_host = '', 
                            scmp_seq = 56, 
                            round_trip_time = '', 
                            state = 'success', )
                        ], 
                    statistics = ansible.module_utils.appliance_api_client.models.ping_statistics.PingStatistics(
                        sent = 56, 
                        received = 56, 
                        packet_loss = 1.337, 
                        time = 56, ), )
            )
        else:
            return ToolsScionPingPostResponseJson(
                summary = ansible.module_utils.appliance_api_client.models.ping_summary.PingSummary(
                    path = ansible.module_utils.appliance_api_client.models.path.Path(
                        fingerprint = 'f', 
                        hops = [
                            ansible.module_utils.appliance_api_client.models.path_segment_hop.Path segment hop(
                                isd_as = '1-ff00:0:110', 
                                interface = 42, )
                            ], 
                        next_hop = '', 
                        expiry = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        mtu = 0, 
                        latency = [
                            ''
                            ], 
                        status = 'unknown', 
                        local_ip = '', ), 
                    payload_size = 56, 
                    scion_packet_size = 56, 
                    replies = [
                        ansible.module_utils.appliance_api_client.models.ping_update.PingUpdate(
                            scion_packet_size = 56, 
                            source_isd_as = '1-ff00:0:110', 
                            source_host = '', 
                            scmp_seq = 56, 
                            round_trip_time = '', 
                            state = 'success', )
                        ], 
                    statistics = ansible.module_utils.appliance_api_client.models.ping_statistics.PingStatistics(
                        sent = 56, 
                        received = 56, 
                        packet_loss = 1.337, 
                        time = 56, ), ),
        )
        """

    def testToolsScionPingPostResponseJson(self):
        """Test ToolsScionPingPostResponseJson"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
