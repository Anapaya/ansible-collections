# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt
from ansible.module_utils.appliance_api_client.models.link_relationship import LinkRelationship
from ansible.module_utils.appliance_api_client.models.link_state import LinkState
from ansible.module_utils.appliance_api_client.models.scion_interface_endpoint import ScionInterfaceEndpoint

class DebugScionInterface(BaseModel):
    """
    DebugScionInterface
    """
    local: ScionInterfaceEndpoint = Field(...)
    remote: ScionInterfaceEndpoint = Field(...)
    relationship: LinkRelationship = Field(...)
    mtu: StrictInt = Field(..., description="The MTU of the SCION interface")
    state: LinkState = Field(...)
    __properties = ["local", "remote", "relationship", "mtu", "state"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DebugScionInterface:
        """Create an instance of DebugScionInterface from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of local
        if self.local:
            _dict['local'] = self.local.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remote
        if self.remote:
            _dict['remote'] = self.remote.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DebugScionInterface:
        """Create an instance of DebugScionInterface from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DebugScionInterface.parse_obj(obj)

        _obj = DebugScionInterface.parse_obj({
            "local": ScionInterfaceEndpoint.from_dict(obj.get("local")) if obj.get("local") is not None else None,
            "remote": ScionInterfaceEndpoint.from_dict(obj.get("remote")) if obj.get("remote") is not None else None,
            "relationship": obj.get("relationship"),
            "mtu": obj.get("mtu"),
            "state": obj.get("state")
        })
        return _obj


