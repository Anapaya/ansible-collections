# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: 0.1.0
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictStr

from typing import List, Optional

from openapi_client.models.health_get_response_json import HealthGetResponseJson
from openapi_client.models.health_status import HealthStatus

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class HealthApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def health_get(
        self,
        check_id: Annotated[Optional[List[StrictStr]], Field(description="List of check_id (or check_id prefixes) that should be included in the response. If unset, health checks are not filtered by check_id. ")] = None,
        service_name: Annotated[Optional[List[StrictStr]], Field(description="List of service_name (or service_name prefixes) that should be included in the response. If unset, health checks are not filtered by service_name. ")] = None,
        status: Annotated[Optional[List[HealthStatus]], Field(description="List of status that should be included in the response. If unset, health checks are not filtered by status. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> HealthGetResponseJson:
        """Appliance Health

        Report the appliance health along with the executed health checks. The health status is based on a set of health checks that are executed. Check the documentation of the individual health checks for more information.  Note that the status is only based on the health checks that are part of the response. If you filter out non-passing health checks, the top level status will be reported as passing. 

        :param check_id: List of check_id (or check_id prefixes) that should be included in the response. If unset, health checks are not filtered by check_id. 
        :type check_id: List[str]
        :param service_name: List of service_name (or service_name prefixes) that should be included in the response. If unset, health checks are not filtered by service_name. 
        :type service_name: List[str]
        :param status: List of status that should be included in the response. If unset, health checks are not filtered by status. 
        :type status: List[HealthStatus]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._health_get_serialize(
            check_id=check_id,
            service_name=service_name,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HealthGetResponseJson",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def health_get_with_http_info(
        self,
        check_id: Annotated[Optional[List[StrictStr]], Field(description="List of check_id (or check_id prefixes) that should be included in the response. If unset, health checks are not filtered by check_id. ")] = None,
        service_name: Annotated[Optional[List[StrictStr]], Field(description="List of service_name (or service_name prefixes) that should be included in the response. If unset, health checks are not filtered by service_name. ")] = None,
        status: Annotated[Optional[List[HealthStatus]], Field(description="List of status that should be included in the response. If unset, health checks are not filtered by status. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[HealthGetResponseJson]:
        """Appliance Health

        Report the appliance health along with the executed health checks. The health status is based on a set of health checks that are executed. Check the documentation of the individual health checks for more information.  Note that the status is only based on the health checks that are part of the response. If you filter out non-passing health checks, the top level status will be reported as passing. 

        :param check_id: List of check_id (or check_id prefixes) that should be included in the response. If unset, health checks are not filtered by check_id. 
        :type check_id: List[str]
        :param service_name: List of service_name (or service_name prefixes) that should be included in the response. If unset, health checks are not filtered by service_name. 
        :type service_name: List[str]
        :param status: List of status that should be included in the response. If unset, health checks are not filtered by status. 
        :type status: List[HealthStatus]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._health_get_serialize(
            check_id=check_id,
            service_name=service_name,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HealthGetResponseJson",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def health_get_without_preload_content(
        self,
        check_id: Annotated[Optional[List[StrictStr]], Field(description="List of check_id (or check_id prefixes) that should be included in the response. If unset, health checks are not filtered by check_id. ")] = None,
        service_name: Annotated[Optional[List[StrictStr]], Field(description="List of service_name (or service_name prefixes) that should be included in the response. If unset, health checks are not filtered by service_name. ")] = None,
        status: Annotated[Optional[List[HealthStatus]], Field(description="List of status that should be included in the response. If unset, health checks are not filtered by status. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Appliance Health

        Report the appliance health along with the executed health checks. The health status is based on a set of health checks that are executed. Check the documentation of the individual health checks for more information.  Note that the status is only based on the health checks that are part of the response. If you filter out non-passing health checks, the top level status will be reported as passing. 

        :param check_id: List of check_id (or check_id prefixes) that should be included in the response. If unset, health checks are not filtered by check_id. 
        :type check_id: List[str]
        :param service_name: List of service_name (or service_name prefixes) that should be included in the response. If unset, health checks are not filtered by service_name. 
        :type service_name: List[str]
        :param status: List of status that should be included in the response. If unset, health checks are not filtered by status. 
        :type status: List[HealthStatus]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._health_get_serialize(
            check_id=check_id,
            service_name=service_name,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HealthGetResponseJson",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _health_get_serialize(
        self,
        check_id,
        service_name,
        status,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            'check_id': 'csv',
            'service_name': 'csv',
            'status': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if check_id is not None:
            
            _query_params.append(('check_id', check_id))
            
        if service_name is not None:
            
            _query_params.append(('service_name', service_name))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/health',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


