# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: 0.1.0
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool
from pydantic import Field
from ansible.module_utils.appliance_api_client.models.config_management_api_oauth_identity_provider import ConfigManagementApiOauthIdentityProvider
from ansible.module_utils.appliance_api_client.models.config_management_api_oauth_role import ConfigManagementApiOauthRole
from ansible.module_utils.appliance_api_client.models.config_management_api_oauth_token_verification_key import ConfigManagementApiOauthTokenVerificationKey
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ConfigManagementApiOauth(BaseModel):
    """
    Open authorization (OAuth) configuration that can authorize users who want to access the Anapaya appliance management API.
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=False, description="Whether the feature is enabled.")
    identity_providers: Optional[List[ConfigManagementApiOauthIdentityProvider]] = Field(default=None, description="The identity providers. Currently only one is supported.")
    roles: Optional[List[ConfigManagementApiOauthRole]] = Field(default=None, description="Roles configuration used for OAuth.")
    token_verification_keys: Optional[List[ConfigManagementApiOauthTokenVerificationKey]] = Field(default=None, description="Keys to verify JWTs.")
    __properties: ClassVar[List[str]] = ["enabled", "identity_providers", "roles", "token_verification_keys"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ConfigManagementApiOauth from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in identity_providers (list)
        _items = []
        if self.identity_providers:
            for _item in self.identity_providers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['identity_providers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item in self.roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['roles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in token_verification_keys (list)
        _items = []
        if self.token_verification_keys:
            for _item in self.token_verification_keys:
                if _item:
                    _items.append(_item.to_dict())
            _dict['token_verification_keys'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ConfigManagementApiOauth from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else False,
            "identity_providers": [ConfigManagementApiOauthIdentityProvider.from_dict(_item) for _item in obj.get("identity_providers")] if obj.get("identity_providers") is not None else None,
            "roles": [ConfigManagementApiOauthRole.from_dict(_item) for _item in obj.get("roles")] if obj.get("roles") is not None else None,
            "token_verification_keys": [ConfigManagementApiOauthTokenVerificationKey.from_dict(_item) for _item in obj.get("token_verification_keys")] if obj.get("token_verification_keys") is not None else None
        })
        return _obj


