# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ConfigSCIONSynchronization(BaseModel):
    """
    The synchronization configuration contains the configuration for SCION path and beacon synchronization.  # noqa: E501
    """
    beacon_synchronization_interval: Optional[StrictStr] = Field('4s', description="The interval between two consecutive beacon synchronizations attempts to the cluster peers. It requires a unit suffix out of ['d', 'h', 'm', 's']. The encoding consists of a decimal number concatenated with a suffix; for example, '5s', '10m', '12h', and '1d'.")
    path_segment_synchronization_interval: Optional[StrictStr] = Field('4s', description="The interval between two consecutive path segment synchronizations attempts to cluster peers. It requires a unit suffix out of ['d', 'h', 'm', 's']. The encoding consists of a decimal number concatenated with a suffix; for example, '5s', '10m', '12h', and '1d'.")
    __properties = ["beacon_synchronization_interval", "path_segment_synchronization_interval"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigSCIONSynchronization:
        """Create an instance of ConfigSCIONSynchronization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigSCIONSynchronization:
        """Create an instance of ConfigSCIONSynchronization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigSCIONSynchronization.parse_obj(obj)

        _obj = ConfigSCIONSynchronization.parse_obj({
            "beacon_synchronization_interval": obj.get("beacon_synchronization_interval") if obj.get("beacon_synchronization_interval") is not None else '4s',
            "path_segment_synchronization_interval": obj.get("path_segment_synchronization_interval") if obj.get("path_segment_synchronization_interval") is not None else '4s'
        })
        return _obj


