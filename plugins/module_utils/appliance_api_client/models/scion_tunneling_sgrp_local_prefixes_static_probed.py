# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

class ScionTunnelingSGRPLocalPrefixesStaticProbed(BaseModel):
    """
    Statically defined prefixes with probing. The prefixes are announced only if the next hop address is reachable.   # noqa: E501
    """
    next_hop: StrictStr = Field(..., alias="next-hop", description="IP address to probe.")
    reachable: StrictBool = Field(..., description="If true, the next hop address is reachable and the prefixes are announced to the peers. ")
    last_success: StrictStr = Field(..., alias="last-success", description="The last time when the next hop address was successfully probed.")
    prefixes: conlist(StrictStr) = Field(..., description="IP prefixes in CIDR format.")
    error: Optional[StrictStr] = Field(None, description="Error from the last ping. If there was no error, the field is not present. ")
    __properties = ["next-hop", "reachable", "last-success", "prefixes", "error"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ScionTunnelingSGRPLocalPrefixesStaticProbed:
        """Create an instance of ScionTunnelingSGRPLocalPrefixesStaticProbed from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ScionTunnelingSGRPLocalPrefixesStaticProbed:
        """Create an instance of ScionTunnelingSGRPLocalPrefixesStaticProbed from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ScionTunnelingSGRPLocalPrefixesStaticProbed.parse_obj(obj)

        _obj = ScionTunnelingSGRPLocalPrefixesStaticProbed.parse_obj({
            "next_hop": obj.get("next-hop"),
            "reachable": obj.get("reachable"),
            "last_success": obj.get("last-success"),
            "prefixes": obj.get("prefixes"),
            "error": obj.get("error")
        })
        return _obj


