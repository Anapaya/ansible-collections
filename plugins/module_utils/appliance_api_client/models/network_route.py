# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class NetworkRoute(BaseModel):
    """
    Network interface summary.  # noqa: E501
    """
    destination: Optional[StrictStr] = Field(None, description="The destination prefix in CIDR format.")
    interface: Optional[StrictStr] = Field(None, description="The interface to route the packets to.")
    scope: Optional[StrictStr] = Field(None, description="The scope of the route.")
    source: Optional[StrictStr] = Field(None, description="The source address.")
    via: Optional[StrictStr] = Field(None, description="Via associated with the route.")
    gateway: Optional[StrictStr] = Field(None, description="Gateway assciated with the route.")
    mtu: Optional[StrictInt] = Field(None, description="MTU associated with the route.")
    metric: Optional[StrictInt] = Field(None, description="Metric associated with the route.")
    __properties = ["destination", "interface", "scope", "source", "via", "gateway", "mtu", "metric"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NetworkRoute:
        """Create an instance of NetworkRoute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NetworkRoute:
        """Create an instance of NetworkRoute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NetworkRoute.parse_obj(obj)

        _obj = NetworkRoute.parse_obj({
            "destination": obj.get("destination"),
            "interface": obj.get("interface"),
            "scope": obj.get("scope"),
            "source": obj.get("source"),
            "via": obj.get("via"),
            "gateway": obj.get("gateway"),
            "mtu": obj.get("mtu"),
            "metric": obj.get("metric")
        })
        return _obj


