# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: 0.1.0
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.config_scion_tunneling_domain_traffic_policy_failover_sequence_entry import ConfigScionTunnelingDomainTrafficPolicyFailoverSequenceEntry
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ConfigScionTunnelingDomainTrafficPolicy(BaseModel):
    """
    List of traffic policies.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The optional description of the traffic policy.")
    failover_sequence: Optional[List[ConfigScionTunnelingDomainTrafficPolicyFailoverSequenceEntry]] = Field(default=None, description="A list of failover sequence entries, each of them associated with a path filter. If there's no live path left after applying the first filter the second one is tried and so on.")
    sequence_id: StrictInt = Field(description="The sequence ID determines the order in which sequence the traffic policies are applied. The sequence ID must be unique for each entry. Target devices try to find the first entry with a matching traffic matcher in ascending order determined by the sequence ID (low to high).")
    traffic_matcher: StrictStr = Field(description="Reference of the traffic matcher that is utilized by this policy. The traffic matcher is a selector for the IP packets covered by this traffic policy.")
    __properties: ClassVar[List[str]] = ["description", "failover_sequence", "sequence_id", "traffic_matcher"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ConfigScionTunnelingDomainTrafficPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in failover_sequence (list)
        _items = []
        if self.failover_sequence:
            for _item in self.failover_sequence:
                if _item:
                    _items.append(_item.to_dict())
            _dict['failover_sequence'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ConfigScionTunnelingDomainTrafficPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "failover_sequence": [ConfigScionTunnelingDomainTrafficPolicyFailoverSequenceEntry.from_dict(_item) for _item in obj.get("failover_sequence")] if obj.get("failover_sequence") is not None else None,
            "sequence_id": obj.get("sequence_id"),
            "traffic_matcher": obj.get("traffic_matcher")
        })
        return _obj


