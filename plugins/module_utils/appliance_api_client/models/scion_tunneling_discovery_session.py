# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator
from ansible.module_utils.appliance_api_client.models.scion_tunneling_discovery_peer import ScionTunnelingDiscoveryPeer

class ScionTunnelingDiscoverySession(BaseModel):
    """
    ScionTunnelingDiscoverySession
    """
    local_isd_as: constr(strict=True) = Field(..., alias="local-isd-as")
    remote_isd_as: constr(strict=True) = Field(..., alias="remote-isd-as")
    path: StrictStr = Field(..., description="SCION path used for the discovery request.")
    peers: conlist(ScionTunnelingDiscoveryPeer) = Field(..., description="The list of peers announced by the remote ISD-AS.")
    last_success: Optional[StrictStr] = Field(None, alias="last-success", description="The last time when the list of peers was fetched successfully.")
    error: Optional[StrictStr] = Field(None, description="Error from the last discovery request. If the last request was successful it is not filled in. ")
    __properties = ["local-isd-as", "remote-isd-as", "path", "peers", "last-success", "error"]

    @validator('local_isd_as')
    def local_isd_as_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$/")
        return value

    @validator('remote_isd_as')
    def remote_isd_as_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ScionTunnelingDiscoverySession:
        """Create an instance of ScionTunnelingDiscoverySession from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in peers (list)
        _items = []
        if self.peers:
            for _item in self.peers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['peers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ScionTunnelingDiscoverySession:
        """Create an instance of ScionTunnelingDiscoverySession from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ScionTunnelingDiscoverySession.parse_obj(obj)

        _obj = ScionTunnelingDiscoverySession.parse_obj({
            "local_isd_as": obj.get("local-isd-as"),
            "remote_isd_as": obj.get("remote-isd-as"),
            "path": obj.get("path"),
            "peers": [ScionTunnelingDiscoveryPeer.from_dict(_item) for _item in obj.get("peers")] if obj.get("peers") is not None else None,
            "last_success": obj.get("last-success"),
            "error": obj.get("error")
        })
        return _obj


