# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from ansible.module_utils.appliance_api_client.models.config_interfaces_bond import ConfigInterfacesBond
from ansible.module_utils.appliance_api_client.models.config_interfaces_ethernet import ConfigInterfacesEthernet
from ansible.module_utils.appliance_api_client.models.config_interfaces_loopback import ConfigInterfacesLoopback
from ansible.module_utils.appliance_api_client.models.config_interfaces_virtual_function import ConfigInterfacesVirtualFunction
from ansible.module_utils.appliance_api_client.models.config_interfaces_vlan import ConfigInterfacesVlan
from ansible.module_utils.appliance_api_client.models.config_interfaces_wireguard import ConfigInterfacesWireguard

class ConfigInterfaces(BaseModel):
    """
    Top-level configuration and state for interfaces.  # noqa: E501
    """
    bonds: Optional[conlist(ConfigInterfacesBond)] = Field(None, description="Top-level configuration and state for the bond interfaces.")
    ethernets: Optional[conlist(ConfigInterfacesEthernet)] = Field(None, description="Top-level configuration and state for ethernet interfaces.")
    loopbacks: Optional[conlist(ConfigInterfacesLoopback)] = Field(None, description="Top-level configuration and state for loopback interfaces.")
    virtual_functions: Optional[conlist(ConfigInterfacesVirtualFunction)] = Field(None, description="Top-level configuration and state for VF interfaces.")
    vlans: Optional[conlist(ConfigInterfacesVlan)] = Field(None, description="Top-level configuration and state for VLAN interfaces.")
    wireguards: Optional[conlist(ConfigInterfacesWireguard)] = Field(None, description="Top-level configuration and state for Wireguard interfaces.")
    __properties = ["bonds", "ethernets", "loopbacks", "virtual_functions", "vlans", "wireguards"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigInterfaces:
        """Create an instance of ConfigInterfaces from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in bonds (list)
        _items = []
        if self.bonds:
            for _item in self.bonds:
                if _item:
                    _items.append(_item.to_dict())
            _dict['bonds'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ethernets (list)
        _items = []
        if self.ethernets:
            for _item in self.ethernets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ethernets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in loopbacks (list)
        _items = []
        if self.loopbacks:
            for _item in self.loopbacks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['loopbacks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in virtual_functions (list)
        _items = []
        if self.virtual_functions:
            for _item in self.virtual_functions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['virtual_functions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vlans (list)
        _items = []
        if self.vlans:
            for _item in self.vlans:
                if _item:
                    _items.append(_item.to_dict())
            _dict['vlans'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in wireguards (list)
        _items = []
        if self.wireguards:
            for _item in self.wireguards:
                if _item:
                    _items.append(_item.to_dict())
            _dict['wireguards'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigInterfaces:
        """Create an instance of ConfigInterfaces from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigInterfaces.parse_obj(obj)

        _obj = ConfigInterfaces.parse_obj({
            "bonds": [ConfigInterfacesBond.from_dict(_item) for _item in obj.get("bonds")] if obj.get("bonds") is not None else None,
            "ethernets": [ConfigInterfacesEthernet.from_dict(_item) for _item in obj.get("ethernets")] if obj.get("ethernets") is not None else None,
            "loopbacks": [ConfigInterfacesLoopback.from_dict(_item) for _item in obj.get("loopbacks")] if obj.get("loopbacks") is not None else None,
            "virtual_functions": [ConfigInterfacesVirtualFunction.from_dict(_item) for _item in obj.get("virtual_functions")] if obj.get("virtual_functions") is not None else None,
            "vlans": [ConfigInterfacesVlan.from_dict(_item) for _item in obj.get("vlans")] if obj.get("vlans") is not None else None,
            "wireguards": [ConfigInterfacesWireguard.from_dict(_item) for _item in obj.get("wireguards")] if obj.get("wireguards") is not None else None
        })
        return _obj


