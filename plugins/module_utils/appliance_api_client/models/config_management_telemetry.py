# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from ansible.module_utils.appliance_api_client.models.config_management_telemetry_flow_metrics import ConfigManagementTelemetryFlowMetrics
from ansible.module_utils.appliance_api_client.models.config_management_telemetry_labels import ConfigManagementTelemetryLabels
from ansible.module_utils.appliance_api_client.models.config_management_telemetry_logging import ConfigManagementTelemetryLogging

class ConfigManagementTelemetry(BaseModel):
    """
    Anapaya appliance telemetry configuration.  # noqa: E501
    """
    address: Optional[StrictStr] = Field(None, description="The address where the telemetry data is exposed. This is a combination of an IP address and a fixed port. The address must be specified as host:port, where host can be empty. An empty address indicates a wildcard address. If the address is not specified or the IP is empty and the port is zero, only the management API address exposes the telemetry data.")
    flow_metrics: Optional[ConfigManagementTelemetryFlowMetrics] = None
    labels: Optional[conlist(ConfigManagementTelemetryLabels)] = Field(None, description="List of static labels that are added to all telemetry data (e.g. logs, metrics).")
    logging: Optional[ConfigManagementTelemetryLogging] = None
    __properties = ["address", "flow_metrics", "labels", "logging"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigManagementTelemetry:
        """Create an instance of ConfigManagementTelemetry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of flow_metrics
        if self.flow_metrics:
            _dict['flow_metrics'] = self.flow_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item in self.labels:
                if _item:
                    _items.append(_item.to_dict())
            _dict['labels'] = _items
        # override the default output from pydantic by calling `to_dict()` of logging
        if self.logging:
            _dict['logging'] = self.logging.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigManagementTelemetry:
        """Create an instance of ConfigManagementTelemetry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigManagementTelemetry.parse_obj(obj)

        _obj = ConfigManagementTelemetry.parse_obj({
            "address": obj.get("address"),
            "flow_metrics": ConfigManagementTelemetryFlowMetrics.from_dict(obj.get("flow_metrics")) if obj.get("flow_metrics") is not None else None,
            "labels": [ConfigManagementTelemetryLabels.from_dict(_item) for _item in obj.get("labels")] if obj.get("labels") is not None else None,
            "logging": ConfigManagementTelemetryLogging.from_dict(obj.get("logging")) if obj.get("logging") is not None else None
        })
        return _obj


