# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class ConfigManagementApiOauthRole(BaseModel):
    """
    List of roles which are used for OAuth.  # noqa: E501
    """
    aliases: Optional[conlist(StrictStr)] = Field(None, description="List of aliases for the role. This is useful for mapping different role names from different identity providers to the same role in the appliance. If no alias are configured for a role the default aliases are 'appliance.<role>', 'appliance/<role>', and 'appliance:<role>'.")
    role: Optional[StrictStr] = Field(None, description="Name of the role.")
    __properties = ["aliases", "role"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigManagementApiOauthRole:
        """Create an instance of ConfigManagementApiOauthRole from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigManagementApiOauthRole:
        """Create an instance of ConfigManagementApiOauthRole from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigManagementApiOauthRole.parse_obj(obj)

        _obj = ConfigManagementApiOauthRole.parse_obj({
            "aliases": obj.get("aliases"),
            "role": obj.get("role")
        })
        return _obj


