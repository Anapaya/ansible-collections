# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr

class ConfigManagementApiBasicAuthUser(BaseModel):
    """
    List of user credentials.  # noqa: E501
    """
    password_hashed: StrictStr = Field(..., description="The user password hashed based on the hash algorithm indicated by the prefix in the string. The string takes the following form based on the Unix crypt function:  $id[$param=value(,param=value)*][$salt[$hash]]  Supported hash functions are:  - $2y$: bcrypt  The 'appliance-cli' or the 'htpasswd' tool can be used to create a password hash. E.g., 'appliance-cli crypto kdf hash' or 'htpasswd -nB admin' prompts for a password. ")
    username: StrictStr = Field(..., description="Name of the user.")
    __properties = ["password_hashed", "username"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigManagementApiBasicAuthUser:
        """Create an instance of ConfigManagementApiBasicAuthUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigManagementApiBasicAuthUser:
        """Create an instance of ConfigManagementApiBasicAuthUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigManagementApiBasicAuthUser.parse_obj(obj)

        _obj = ConfigManagementApiBasicAuthUser.parse_obj({
            "password_hashed": obj.get("password_hashed"),
            "username": obj.get("username")
        })
        return _obj


