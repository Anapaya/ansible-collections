# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, conlist
from ansible.module_utils.appliance_api_client.models.config_scionascppki_issuer import ConfigSCIONASCPPKIIssuer

class ConfigSCIONASCPPKI(BaseModel):
    """
    SCION CPPKI configuration for the SCION AS.  # noqa: E501
    """
    disable_auto_renewal: Optional[StrictBool] = Field(None, description="Whether automatic renewal of AS certificates should be disabled. Usually, this value should not be set. By disabling certificate renewal, the appliance is set into a manual mode where new AS certificates must be provisioned manually and periodically.")
    issuers: Optional[conlist(ConfigSCIONASCPPKIIssuer)] = Field(None, description="The SCION CPPKI Issuers that issue certificates for the local SCION AS. The list of issuers is tried in order of their priority. If no issuers are set explicitly, the renewal process will use the issuer of the newest existing SCION CPPKI AS Certificate.")
    __properties = ["disable_auto_renewal", "issuers"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigSCIONASCPPKI:
        """Create an instance of ConfigSCIONASCPPKI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in issuers (list)
        _items = []
        if self.issuers:
            for _item in self.issuers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['issuers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigSCIONASCPPKI:
        """Create an instance of ConfigSCIONASCPPKI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigSCIONASCPPKI.parse_obj(obj)

        _obj = ConfigSCIONASCPPKI.parse_obj({
            "disable_auto_renewal": obj.get("disable_auto_renewal"),
            "issuers": [ConfigSCIONASCPPKIIssuer.from_dict(_item) for _item in obj.get("issuers")] if obj.get("issuers") is not None else None
        })
        return _obj


