# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from ansible.module_utils.appliance_api_client.models.config_bgp_neighbor_bfd import ConfigBgpNeighborBfd
from ansible.module_utils.appliance_api_client.models.config_bgp_neighbor_timers import ConfigBgpNeighborTimers
from ansible.module_utils.appliance_api_client.models.config_bgp_neighbor_transport import ConfigBgpNeighborTransport

class ConfigBgpNeighbor(BaseModel):
    """
    List of BGP neighbors configured on the local system, uniquely identified by peer IPv4 or IPv6 address  # noqa: E501
    """
    auth_password: Optional[StrictStr] = Field(None, description="An MD5 authentication password for use with the neighboring device.")
    bfd: Optional[ConfigBgpNeighborBfd] = None
    description: Optional[StrictStr] = Field(None, description="An optional textual description of the neighbor.")
    ebgp_multihop: Optional[StrictInt] = Field(None, description="Specifying ebgp-multihop allows sessions with eBGP neighbors to establish when they are multiple hops away. When the neighbor is not directly connected and this setting is not enabled, the session will not establish.")
    enabled: Optional[StrictBool] = Field(True, description="Whether the BGP peer is enabled. In cases where the enabled leaf is set to false, the local system will not initiate connections to the neighbor, and will not respond to TCP connections attempts from the neighbor. If the BGP session is established at the time that this property is set to false, the session will be ceased.")
    local_as: Optional[StrictInt] = Field(None, description="The local BGP autonomous system number that is to be used when establishing sessions with the remote peer or peer group, if this differs from the global BGP router autonomous system number.")
    neighbor_address: Optional[StrictStr] = Field(None, description="Address of the BGP peer, either IPv4 or IPv6.")
    peer_as: Optional[StrictInt] = Field(None, description="BGP autonomous system number of the peer.")
    timers: Optional[ConfigBgpNeighborTimers] = None
    transport: Optional[ConfigBgpNeighborTransport] = None
    ttl_security: Optional[StrictInt] = Field(None, description="BGP Time To Live (TTL) security check. Reference: RFC 5082: The Generalized TTL Security Mechanism (GTSM), RFC 7454: BGP Operations and Security.")
    __properties = ["auth_password", "bfd", "description", "ebgp_multihop", "enabled", "local_as", "neighbor_address", "peer_as", "timers", "transport", "ttl_security"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigBgpNeighbor:
        """Create an instance of ConfigBgpNeighbor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of bfd
        if self.bfd:
            _dict['bfd'] = self.bfd.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timers
        if self.timers:
            _dict['timers'] = self.timers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transport
        if self.transport:
            _dict['transport'] = self.transport.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigBgpNeighbor:
        """Create an instance of ConfigBgpNeighbor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigBgpNeighbor.parse_obj(obj)

        _obj = ConfigBgpNeighbor.parse_obj({
            "auth_password": obj.get("auth_password"),
            "bfd": ConfigBgpNeighborBfd.from_dict(obj.get("bfd")) if obj.get("bfd") is not None else None,
            "description": obj.get("description"),
            "ebgp_multihop": obj.get("ebgp_multihop"),
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else True,
            "local_as": obj.get("local_as"),
            "neighbor_address": obj.get("neighbor_address"),
            "peer_as": obj.get("peer_as"),
            "timers": ConfigBgpNeighborTimers.from_dict(obj.get("timers")) if obj.get("timers") is not None else None,
            "transport": ConfigBgpNeighborTransport.from_dict(obj.get("transport")) if obj.get("transport") is not None else None,
            "ttl_security": obj.get("ttl_security")
        })
        return _obj


