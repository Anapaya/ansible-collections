# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: 0.1.0
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from ansible.module_utils.appliance_api_client.models.config_management_api import ConfigManagementApi
from ansible.module_utils.appliance_api_client.models.config_management_remote_repository import ConfigManagementRemoteRepository
from ansible.module_utils.appliance_api_client.models.config_management_ssh import ConfigManagementSsh
from ansible.module_utils.appliance_api_client.models.config_management_telemetry import ConfigManagementTelemetry
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ConfigManagement(BaseModel):
    """
    The necessary configuration data for the management of the  Anapaya appliance.
    """ # noqa: E501
    api: Optional[ConfigManagementApi] = None
    hostname: Optional[StrictStr] = Field(default='anapaya-appliance', description="The hostname of the Anapaya appliance host. It is used to identify the host in the telemetry data; thus, each host should have a unique hostname.")
    remote_repository: Optional[ConfigManagementRemoteRepository] = None
    ssh: Optional[ConfigManagementSsh] = None
    telemetry: Optional[ConfigManagementTelemetry] = None
    __properties: ClassVar[List[str]] = ["api", "hostname", "remote_repository", "ssh", "telemetry"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ConfigManagement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of api
        if self.api:
            _dict['api'] = self.api.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remote_repository
        if self.remote_repository:
            _dict['remote_repository'] = self.remote_repository.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ssh
        if self.ssh:
            _dict['ssh'] = self.ssh.to_dict()
        # override the default output from pydantic by calling `to_dict()` of telemetry
        if self.telemetry:
            _dict['telemetry'] = self.telemetry.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ConfigManagement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "api": ConfigManagementApi.from_dict(obj.get("api")) if obj.get("api") is not None else None,
            "hostname": obj.get("hostname") if obj.get("hostname") is not None else 'anapaya-appliance',
            "remote_repository": ConfigManagementRemoteRepository.from_dict(obj.get("remote_repository")) if obj.get("remote_repository") is not None else None,
            "ssh": ConfigManagementSsh.from_dict(obj.get("ssh")) if obj.get("ssh") is not None else None,
            "telemetry": ConfigManagementTelemetry.from_dict(obj.get("telemetry")) if obj.get("telemetry") is not None else None
        })
        return _obj


