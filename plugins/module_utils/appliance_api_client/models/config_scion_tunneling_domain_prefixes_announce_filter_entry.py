# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator

class ConfigScionTunnelingDomainPrefixesAnnounceFilterEntry(BaseModel):
    """
    List of prefix matchers. Prefixes that are to be announced are filtered by the prefix matchers in order by keeping all IPs that are in _accepted_ matchers and removing ones that are in _rejected_ prefix matchers.  # noqa: E501
    """
    action: StrictStr = Field(..., description="Specify matchers action.")
    description: Optional[StrictStr] = Field(None, description="Optional description for the prefix matcher.")
    prefixes: Optional[conlist(StrictStr)] = Field(None, description="The list of IP prefixes used for matching. The matcher matches all IP prefixes that are contained in the union of the specified IP prefixes, i.e. it matches all listed prefixes as well as their contained more specific prefixes.")
    sequence_id: StrictInt = Field(..., description="The sequence ID determines the order in which sequence the prefix matchers are applied. The sequence ID must be unique for each entry. Target devices apply the prefix matchers in order of ascending sequence ID (low to high) accepting all IPs that are in _accepted_ matchers and rejecting the ones that are in _rejected_ matchers.")
    __properties = ["action", "description", "prefixes", "sequence_id"]

    @validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ACCEPT', 'REJECT'):
            raise ValueError("must be one of enum values ('ACCEPT', 'REJECT')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigScionTunnelingDomainPrefixesAnnounceFilterEntry:
        """Create an instance of ConfigScionTunnelingDomainPrefixesAnnounceFilterEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigScionTunnelingDomainPrefixesAnnounceFilterEntry:
        """Create an instance of ConfigScionTunnelingDomainPrefixesAnnounceFilterEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigScionTunnelingDomainPrefixesAnnounceFilterEntry.parse_obj(obj)

        _obj = ConfigScionTunnelingDomainPrefixesAnnounceFilterEntry.parse_obj({
            "action": obj.get("action"),
            "description": obj.get("description"),
            "prefixes": obj.get("prefixes"),
            "sequence_id": obj.get("sequence_id")
        })
        return _obj


