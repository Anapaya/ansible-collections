# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictInt, conlist
from ansible.module_utils.appliance_api_client.models.path import Path
from ansible.module_utils.appliance_api_client.models.ping_statistics import PingStatistics
from ansible.module_utils.appliance_api_client.models.ping_update import PingUpdate

class PingSummary(BaseModel):
    """
    PingSummary
    """
    path: Path = Field(...)
    payload_size: StrictInt = Field(..., description="Payload size in bytes")
    scion_packet_size: StrictInt = Field(..., description="Packet size in bytes")
    replies: conlist(PingUpdate) = Field(...)
    statistics: PingStatistics = Field(...)
    __properties = ["path", "payload_size", "scion_packet_size", "replies", "statistics"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PingSummary:
        """Create an instance of PingSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of path
        if self.path:
            _dict['path'] = self.path.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in replies (list)
        _items = []
        if self.replies:
            for _item in self.replies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['replies'] = _items
        # override the default output from pydantic by calling `to_dict()` of statistics
        if self.statistics:
            _dict['statistics'] = self.statistics.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PingSummary:
        """Create an instance of PingSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PingSummary.parse_obj(obj)

        _obj = PingSummary.parse_obj({
            "path": Path.from_dict(obj.get("path")) if obj.get("path") is not None else None,
            "payload_size": obj.get("payload_size"),
            "scion_packet_size": obj.get("scion_packet_size"),
            "replies": [PingUpdate.from_dict(_item) for _item in obj.get("replies")] if obj.get("replies") is not None else None,
            "statistics": PingStatistics.from_dict(obj.get("statistics")) if obj.get("statistics") is not None else None
        })
        return _obj


