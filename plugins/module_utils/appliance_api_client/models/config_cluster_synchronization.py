# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ConfigClusterSynchronization(BaseModel):
    """
    The configuration data necessary for the anapaya cluster synchronization. This determines how frequently this appliance synchronizes its local data with its peers, if synchronization is enabled.  # noqa: E501
    """
    address: Optional[StrictStr] = Field(None, description="The address where peers can fetch topology information. If this is not set, topology information is not exposed to peers and should be statically configured on the peers.")
    node_synchronization_interval: Optional[StrictStr] = Field('1m', description="The interval between two consecutive topology synchronizations attempts to the cluster peers. Must only be set if dynamic topology discovery is enabled. It requires a unit suffix out of ['d', 'h', 'm', 's']. The encoding consists of a decimal number concatenated with a suffix; for example, '5s', '10m', '12h', and '1d'.")
    __properties = ["address", "node_synchronization_interval"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigClusterSynchronization:
        """Create an instance of ConfigClusterSynchronization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigClusterSynchronization:
        """Create an instance of ConfigClusterSynchronization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigClusterSynchronization.parse_obj(obj)

        _obj = ConfigClusterSynchronization.parse_obj({
            "address": obj.get("address"),
            "node_synchronization_interval": obj.get("node_synchronization_interval") if obj.get("node_synchronization_interval") is not None else '1m'
        })
        return _obj


