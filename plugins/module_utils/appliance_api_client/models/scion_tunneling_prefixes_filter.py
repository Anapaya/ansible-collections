# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist, validator

class ScionTunnelingPrefixesFilter(BaseModel):
    """
    ScionTunnelingPrefixesFilter
    """
    action: StrictStr = Field(..., description="An action for prefixes.")
    prefixes: conlist(StrictStr) = Field(..., description="A list of IP prefixes.")
    __properties = ["action", "prefixes"]

    @validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ACCEPT', 'REJECT'):
            raise ValueError("must be one of enum values ('ACCEPT', 'REJECT')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ScionTunnelingPrefixesFilter:
        """Create an instance of ScionTunnelingPrefixesFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ScionTunnelingPrefixesFilter:
        """Create an instance of ScionTunnelingPrefixesFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ScionTunnelingPrefixesFilter.parse_obj(obj)

        _obj = ScionTunnelingPrefixesFilter.parse_obj({
            "action": obj.get("action"),
            "prefixes": obj.get("prefixes")
        })
        return _obj


