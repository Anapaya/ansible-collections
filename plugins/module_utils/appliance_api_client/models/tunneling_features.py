# coding: utf-8

"""
    Appliance Management API

    Management API for the Anapaya EDGE, CORE and GATE appliances

    The version of the OpenAPI document: v0.37.1
    Contact: ops@anapaya.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool
from ansible.module_utils.appliance_api_client.models.max_or_unlimited import MaxOrUnlimited

class TunnelingFeatures(BaseModel):
    """
    The tunneling features  # noqa: E501
    """
    config_disallowed: Optional[StrictBool] = Field(None, description="If true, any tunneling configuration is disallowed. ")
    max_remotes: Optional[MaxOrUnlimited] = None
    max_path_filters: Optional[MaxOrUnlimited] = None
    max_traffic_matchers: Optional[MaxOrUnlimited] = None
    __properties = ["config_disallowed", "max_remotes", "max_path_filters", "max_traffic_matchers"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TunnelingFeatures:
        """Create an instance of TunnelingFeatures from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of max_remotes
        if self.max_remotes:
            _dict['max_remotes'] = self.max_remotes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_path_filters
        if self.max_path_filters:
            _dict['max_path_filters'] = self.max_path_filters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_traffic_matchers
        if self.max_traffic_matchers:
            _dict['max_traffic_matchers'] = self.max_traffic_matchers.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TunnelingFeatures:
        """Create an instance of TunnelingFeatures from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TunnelingFeatures.parse_obj(obj)

        _obj = TunnelingFeatures.parse_obj({
            "config_disallowed": obj.get("config_disallowed"),
            "max_remotes": MaxOrUnlimited.from_dict(obj.get("max_remotes")) if obj.get("max_remotes") is not None else None,
            "max_path_filters": MaxOrUnlimited.from_dict(obj.get("max_path_filters")) if obj.get("max_path_filters") is not None else None,
            "max_traffic_matchers": MaxOrUnlimited.from_dict(obj.get("max_traffic_matchers")) if obj.get("max_traffic_matchers") is not None else None
        })
        return _obj


